# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2005-11-03 11:06-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: ENCODING"

# type: =head1
#: dh_installpam:3 dh_installemacsen:3 dh_installinfo:3 dh_strip:3 dh_installppp:3 dh_compress:3 dh_md5sums:3 dh_installexamples:3 dh_installcron:3 dh_installinit:3 dh_usrlocal:3 dh_gconf:3 dh_installmodules:3 dh_installmenu:3 dh_installlogrotate:3 debhelper.pod:1 dh_clean:3 dh_undocumented:3 dh_testversion:3 dh_testdir:3 dh_shlibdeps:3 dh_scrollkeeper:3 dh_installdirs:3 dh_link:3 dh_installdebconf:3 dh_installmime:3 dh_installwm:3 dh_installdeb:3 dh_builddeb:3 dh_gencontrol:3 dh_install:3 dh_makeshlibs:3 dh_perl:3 dh_fixperms:3 dh_listpackages:3 dh_installman:3 dh_testroot:3 dh_movefiles:3 dh_desktop:3 dh_suidregister:3 dh_installchangelogs:3 dh_python:3 dh_installdocs:3 dh_installcatalogs:3 dh_installmanpages:3 dh_installxfonts:3 dh_installlogcheck:3
msgid "NAME"
msgstr ""

# type: textblock
#: dh_installpam:5
msgid "dh_installpam - install pam support files"
msgstr ""

# type: =head1
#: dh_installpam:12 dh_installemacsen:12 dh_installinfo:12 dh_strip:13 dh_installppp:12 dh_compress:13 dh_md5sums:13 dh_installexamples:12 dh_installcron:12 dh_installinit:12 dh_usrlocal:15 dh_gconf:12 dh_installmodules:14 dh_installmenu:12 dh_installlogrotate:12 debhelper.pod:5 dh_clean:12 dh_undocumented:12 dh_testversion:12 dh_testdir:12 dh_shlibdeps:13 dh_scrollkeeper:12 dh_installdirs:12 dh_link:13 dh_installdebconf:12 dh_installmime:12 dh_installwm:12 dh_installdeb:12 dh_builddeb:12 dh_gencontrol:12 dh_install:13 dh_makeshlibs:12 dh_perl:14 dh_fixperms:12 dh_listpackages:12 dh_installman:13 dh_testroot:7 dh_movefiles:12 dh_desktop:12 dh_suidregister:7 dh_installchangelogs:12 dh_python:13 dh_installdocs:12 dh_installcatalogs:14 dh_installmanpages:13 dh_installxfonts:12 dh_installlogcheck:12
msgid "SYNOPSIS"
msgstr ""

# type: textblock
#: dh_installpam:14
msgid "B<dh_installpam> [S<I<debhelper options>>] [B<--name=>I<name>]"
msgstr ""

# type: =head1
#: dh_installpam:16 dh_installemacsen:16 dh_installinfo:16 dh_strip:17 dh_installppp:16 dh_compress:17 dh_md5sums:17 dh_installexamples:16 dh_installcron:16 dh_installinit:16 dh_usrlocal:19 dh_gconf:16 dh_installmodules:18 dh_installmenu:16 dh_installlogrotate:16 debhelper.pod:9 dh_clean:16 dh_undocumented:16 dh_testversion:16 dh_testdir:16 dh_shlibdeps:17 dh_scrollkeeper:16 dh_installdirs:16 dh_link:17 dh_installdebconf:16 dh_installmime:16 dh_installwm:16 dh_installdeb:16 dh_builddeb:16 dh_gencontrol:16 dh_install:17 dh_makeshlibs:16 dh_perl:18 dh_fixperms:16 dh_listpackages:16 dh_installman:17 dh_testroot:11 dh_movefiles:16 dh_desktop:16 dh_suidregister:11 dh_installchangelogs:16 dh_python:17 dh_installdocs:16 dh_installcatalogs:18 dh_installmanpages:17 dh_installxfonts:16 dh_installlogcheck:16
msgid "DESCRIPTION"
msgstr ""

# type: textblock
#: dh_installpam:18
msgid ""
"dh_installpam is a debhelper program that is responsible for installing "
"files used by PAM into package build directories."
msgstr ""

# type: textblock
#: dh_installpam:21
msgid ""
"If a file named debian/package.pam exists, then it is installed into "
"etc/pam.d/package in the package build directory."
msgstr ""

# type: =head1
#: dh_installpam:24 dh_installemacsen:34 dh_installinfo:36 dh_strip:35 dh_installppp:26 dh_compress:38 dh_md5sums:28 dh_installexamples:29 dh_installcron:24 dh_installinit:33 dh_usrlocal:38 dh_installmodules:35 dh_installmenu:33 dh_installlogrotate:22 dh_clean:25 dh_testversion:34 dh_testdir:23 dh_shlibdeps:26 dh_scrollkeeper:31 dh_installdirs:32 dh_link:48 dh_installdebconf:59 dh_installmime:30 dh_installwm:30 dh_builddeb:21 dh_gencontrol:26 dh_install:43 dh_makeshlibs:24 dh_perl:28 dh_fixperms:31 dh_installman:54 dh_movefiles:32 dh_installchangelogs:40 dh_python:35 dh_installdocs:51 dh_installcatalogs:42 dh_installmanpages:40
msgid "OPTIONS"
msgstr ""

# type: =item
#: dh_installpam:28 dh_installppp:30 dh_installcron:28 dh_installinit:65 dh_installmodules:43 dh_installlogrotate:26
msgid "B<--name=>I<name>"
msgstr ""

# type: textblock
#: dh_installpam:30
msgid ""
"Look for files named debian/package.name.pam and install them as "
"etc/pam.d/name, instead of using the usual files and installing them as the "
"package name."
msgstr ""

# type: =head1
#: dh_installpam:52 dh_installemacsen:108 dh_installinfo:122 dh_strip:221 dh_installppp:56 dh_compress:189 dh_md5sums:86 dh_installexamples:102 dh_installcron:61 dh_installinit:188 dh_usrlocal:113 dh_gconf:58 dh_installmodules:102 dh_installmenu:79 dh_installlogrotate:50 debhelper.pod:433 dh_clean:109 dh_undocumented:28 dh_testversion:74 dh_testdir:43 dh_shlibdeps:148 dh_scrollkeeper:75 dh_installdirs:87 dh_link:206 dh_installdebconf:135 dh_installmime:84 dh_installwm:94 dh_installdeb:93 dh_builddeb:78 dh_gencontrol:73 dh_install:251 dh_makeshlibs:183 dh_perl:140 dh_fixperms:107 dh_listpackages:28 dh_installman:210 dh_testroot:26 dh_movefiles:162 dh_desktop:43 dh_suidregister:117 dh_installchangelogs:125 dh_python:266 dh_installdocs:232 dh_installcatalogs:105 dh_installmanpages:197 dh_installxfonts:83 dh_installlogcheck:51
msgid "SEE ALSO"
msgstr ""

# type: textblock
#: dh_installpam:54 dh_installemacsen:110 dh_installinfo:124 dh_strip:223 dh_installppp:58 dh_compress:191 dh_md5sums:88 dh_installexamples:104 dh_installcron:63 dh_installinit:190 dh_usrlocal:115 dh_gconf:60 dh_installmodules:104 dh_installlogrotate:52 dh_clean:111 dh_undocumented:30 dh_testversion:76 dh_testdir:45 dh_installdirs:89 dh_link:208 dh_installdebconf:137 dh_installmime:86 dh_installwm:96 dh_installdeb:95 dh_builddeb:80 dh_gencontrol:75 dh_install:253 dh_makeshlibs:185 dh_perl:142 dh_fixperms:109 dh_listpackages:30 dh_installman:212 dh_testroot:28 dh_movefiles:164 dh_suidregister:119 dh_installchangelogs:127 dh_python:268 dh_installdocs:234 dh_installcatalogs:107 dh_installmanpages:199 dh_installxfonts:85 dh_installlogcheck:53
msgid "L<debhelper(7)>"
msgstr ""

# type: textblock
#: dh_installpam:56 dh_installemacsen:112 dh_installinfo:126 dh_strip:225 dh_installppp:60 dh_compress:193 dh_md5sums:90 dh_installexamples:106 dh_installcron:65 dh_installinit:192 dh_usrlocal:117 dh_gconf:62 dh_installmodules:106 dh_installmenu:85 dh_installlogrotate:54 dh_clean:113 dh_undocumented:32 dh_testversion:78 dh_testdir:47 dh_shlibdeps:152 dh_scrollkeeper:79 dh_installdirs:91 dh_link:210 dh_installdebconf:139 dh_installmime:88 dh_installwm:98 dh_installdeb:97 dh_builddeb:82 dh_gencontrol:77 dh_install:255 dh_makeshlibs:187 dh_perl:144 dh_fixperms:111 dh_listpackages:32 dh_installman:214 dh_testroot:30 dh_movefiles:166 dh_desktop:47 dh_suidregister:121 dh_installchangelogs:129 dh_python:270 dh_installdocs:236 dh_installmanpages:201 dh_installxfonts:87
msgid "This program is a part of debhelper."
msgstr ""

# type: =head1
#: dh_installpam:58 dh_installemacsen:114 dh_installinfo:128 dh_strip:227 dh_installppp:62 dh_compress:195 dh_md5sums:92 dh_installexamples:108 dh_installcron:67 dh_installinit:194 dh_usrlocal:119 dh_gconf:64 dh_installmodules:108 dh_installmenu:87 dh_installlogrotate:56 debhelper.pod:447 dh_clean:115 dh_undocumented:34 dh_testversion:80 dh_testdir:49 dh_shlibdeps:154 dh_scrollkeeper:81 dh_installdirs:93 dh_link:212 dh_installdebconf:141 dh_installmime:90 dh_installwm:100 dh_installdeb:99 dh_builddeb:84 dh_gencontrol:79 dh_install:257 dh_makeshlibs:189 dh_perl:146 dh_fixperms:113 dh_listpackages:34 dh_installman:216 dh_testroot:32 dh_movefiles:168 dh_desktop:49 dh_suidregister:123 dh_installchangelogs:131 dh_python:272 dh_installdocs:238 dh_installcatalogs:111 dh_installmanpages:203 dh_installxfonts:89 dh_installlogcheck:57
msgid "AUTHOR"
msgstr ""

# type: textblock
#: dh_installpam:60 dh_installemacsen:116 dh_installinfo:130 dh_strip:229 dh_installppp:64 dh_compress:197 dh_md5sums:94 dh_installexamples:110 dh_installcron:69 dh_installinit:196 dh_installmodules:110 dh_installmenu:89 dh_installlogrotate:58 debhelper.pod:449 dh_clean:117 dh_undocumented:36 dh_testversion:82 dh_testdir:51 dh_shlibdeps:156 dh_installdirs:95 dh_link:214 dh_installdebconf:143 dh_installmime:92 dh_installwm:102 dh_installdeb:101 dh_builddeb:86 dh_gencontrol:81 dh_install:259 dh_makeshlibs:191 dh_fixperms:115 dh_listpackages:36 dh_installman:218 dh_testroot:34 dh_movefiles:170 dh_suidregister:125 dh_installchangelogs:133 dh_installdocs:240 dh_installmanpages:205 dh_installxfonts:91
msgid "Joey Hess <joeyh@debian.org>"
msgstr ""

# type: textblock
#: dh_installemacsen:5
msgid "dh_installemacsen - register an emacs add on package"
msgstr ""

# type: textblock
#: dh_installemacsen:14
msgid ""
"B<dh_installemacsen> [S<I<debhelper options>>] [B<-n>] [B<--priority=>I<n>] "
"[B<--flavor=>I<foo>]"
msgstr ""

# type: textblock
#: dh_installemacsen:18
msgid ""
"dh_installemacsen is a debhelper program that is responsible for installing "
"files used by the debian emacsen-common package into package build "
"directories."
msgstr ""

# type: textblock
#: dh_installemacsen:22
msgid ""
"It also automatically generates the postinst and prerm commands needed to "
"register a package as an emacs add on package. See L<dh_installdeb(1)> for "
"an explanation of how this works."
msgstr ""

# type: textblock
#: dh_installemacsen:26
msgid ""
"If a file named debian/package.emacsen-install exists, then it is installed "
"into usr/lib/emacsen-common/packages/install/package in the package build "
"directory. Similarly, debian/package.emacsen-remove is installed into "
"usr/lib/emacsen-common/packages/remove/package . And similarly, "
"debian/package.emacsen-startup is installed into "
"etc/emacs/site-start.d/50<package>.el (by default)."
msgstr ""

# type: =item
#: dh_installemacsen:38 dh_installinfo:45 dh_installinit:37 dh_usrlocal:42 dh_installmodules:39 dh_installmenu:37 dh_scrollkeeper:35 dh_installdebconf:63 dh_installmime:34 dh_installwm:40 dh_makeshlibs:58 dh_python:56 dh_installdocs:60 dh_installcatalogs:46
msgid "B<-n>, B<--noscripts>"
msgstr ""

# type: textblock
#: dh_installemacsen:40 dh_installinfo:47 dh_installdocs:62
msgid "Do not modify postinst/prerm scripts."
msgstr ""

# type: =item
#: dh_installemacsen:42 dh_installwm:34
msgid "B<--priority=>I<n>"
msgstr ""

# type: textblock
#: dh_installemacsen:44
msgid "Sets the priority number of a site-start.d file. Default is 50."
msgstr ""

# type: =item
#: dh_installemacsen:46
msgid "B<--flavor=>I<foo>"
msgstr ""

# type: textblock
#: dh_installemacsen:48
msgid ""
"Sets the flavor a site-start.d file will be installed in. Default is "
"\"emacs\", alternatives include \"xemacs\" and \"emacs20\"."
msgstr ""

# type: =head1
#: dh_installemacsen:53 dh_installinfo:56 dh_strip:74 dh_installexamples:50 dh_installinit:92 dh_usrlocal:48 dh_installmodules:52 debhelper.pod:158 dh_scrollkeeper:41 dh_installmime:40 dh_installwm:49 dh_installman:70 dh_movefiles:58 dh_installdocs:87 dh_installcatalogs:52 dh_installxfonts:36
msgid "NOTES"
msgstr ""

# type: textblock
#: dh_installemacsen:55 dh_installinfo:58 dh_installinit:94 dh_usrlocal:50 dh_installmodules:54 dh_scrollkeeper:43 dh_installmime:42 dh_installwm:51 dh_installcatalogs:54
msgid ""
"Note that this command is not idempotent. \"dh_clean -k\" should be called "
"between invocations of this command. Otherwise, it may cause multiple "
"instances of the same text to be added to maintainer scripts."
msgstr ""

# type: textblock
#: dh_installinfo:5
msgid "dh_installinfo - install and register info files"
msgstr ""

# type: textblock
#: dh_installinfo:14
msgid "B<dh_installinfo> [S<I<debhelper options>>] [B<-A>] [B<-n>] [S<I<file ...>>]"
msgstr ""

# type: textblock
#: dh_installinfo:18
msgid ""
"dh_installinfo is a debhelper program that is responsible for installing "
"info files and registering the files it installs with install-info."
msgstr ""

# type: textblock
#: dh_installinfo:21
msgid ""
"It determines some information about the info files by parsing them, in "
"particular, it looks at the INFO-DIR-SECTION line to determine what section "
"the info file belongs in."
msgstr ""

# type: textblock
#: dh_installinfo:25
msgid ""
"Any filenames specified as parameters will be installed into the first "
"package dh_installinfo is told to act on. By default, this is the first "
"binary package in debian/control, but if you use -p, -i, or -a flags, it "
"will be the first package specified by those flags."
msgstr ""

# type: textblock
#: dh_installinfo:30
msgid "Files named debian/package.info can list other files to be installed."
msgstr ""

# type: textblock
#: dh_installinfo:32
msgid ""
"dh_installinfo will automatically generate the postinst and prerm commands "
"needed to interface with install-info, updating the info . See "
"L<dh_installdeb(1)> for an explanation of how this works."
msgstr ""

# type: =item
#: dh_installinfo:40 dh_compress:50 dh_installexamples:33 debhelper.pod:151 dh_installdirs:36 dh_link:52 dh_installman:58 dh_installdocs:55
msgid "B<-A>, B<--all>"
msgstr ""

# type: textblock
#: dh_installinfo:42 dh_installman:60 dh_installdocs:57
msgid ""
"Install all files specified by command line parameters in ALL packages acted "
"on."
msgstr ""

# type: =item
#: dh_installinfo:49 dh_compress:55 dh_installexamples:38 dh_clean:50 dh_testdir:27 dh_movefiles:49 dh_installdocs:69 dh_installmanpages:44
msgid "I<file ...>"
msgstr ""

# type: textblock
#: dh_installinfo:51
msgid ""
"Install these info files into the first package acted on. (Or in all "
"packages if -A is specified)."
msgstr ""

# type: textblock
#: dh_strip:5
msgid "dh_strip - strip executables, shared libraries, and some static libraries"
msgstr ""

# type: textblock
#: dh_strip:15
msgid ""
"B<dh_strip> [S<I<debhelper options>>] [B<-X>I<item>] [--dbg-package=package] "
"[--keep-debug]"
msgstr ""

# type: textblock
#: dh_strip:19
msgid ""
"dh_strip is a debhelper program that is responsible for stripping "
"executables, shared libraries, and static libraries that are not used for "
"debugging."
msgstr ""

# type: textblock
#: dh_strip:23
msgid ""
"This program examines your package build directories and works out what to "
"strip on its own. It uses L<file(1)> and file permissions and filenames to "
"figure out what files are shared libraries (*.so), executable binaries, and "
"static (lib*.a) and debugging libraries (lib*_g.a, debug/*.so), and strips "
"each as much as is possible. (Which is not at all for debugging libraries.) "
"In general it seems to make very good guesses, and will do the right thing "
"in almost all cases."
msgstr ""

# type: textblock
#: dh_strip:31
msgid ""
"Since it is very hard to automatically guess if a file is a module, and hard "
"to determine how to strip a module, dh_strip does not currently deal with "
"stripping binary modules such as .o files."
msgstr ""

# type: =item
#: dh_strip:39 dh_compress:42 dh_md5sums:37 debhelper.pod:146 dh_shlibdeps:36 dh_makeshlibs:62
msgid "B<-X>I<item>, B<--exclude=>I<item>"
msgstr ""

# type: textblock
#: dh_strip:41
msgid ""
"Exclude files that contain \"item\" anywhere in their filename from being "
"stripped. You may use this option multiple times to build up a list of "
"things to exclude."
msgstr ""

# type: =item
#: dh_strip:45
msgid "B<--dbg-package=>I<package>"
msgstr ""

# type: textblock
#: dh_strip:47
msgid ""
"Causes dh_strip to save debug symbols stripped from the packages it acts on "
"as independent files in the package build directory of the specified "
"debugging package."
msgstr ""

# type: textblock
#: dh_strip:51
msgid ""
"For example, if your packages are lifoo and foo and you want to include a "
"foo-dbg package with debugging symbols, use dh_strip --dbg-package=foo-dbg."
msgstr ""

# type: textblock
#: dh_strip:54
msgid ""
"Note that this option behaves significantly different in debhelper "
"compatibility levels 4 and below. Instead of specifying the name of a debug "
"package to put symbols in, it specifies a package (or packages) which should "
"have separated debug symbols, and the separated symbols are placed in "
"packages with \"-dbg\" added to their name."
msgstr ""

# type: textblock
#: dh_strip:60
msgid ""
"Note that if you use this option, your package should build-depend on "
"binutils (>= 2.14.90.0.7)."
msgstr ""

# type: =item
#: dh_strip:63
msgid "B<-k>, B<--keep-debug>"
msgstr ""

# type: textblock
#: dh_strip:65
msgid ""
"Debug symbols will be retained, but split into an independent file in "
"usr/lib/debug/ in the package build directory. --dbg-package is easier to "
"use than this option, but this option is more flexible."
msgstr ""

# type: textblock
#: dh_strip:69
msgid ""
"Note that if you use this option, your package should build-depend on "
"binutils (>= 2.12.90.0.9)."
msgstr ""

# type: textblock
#: dh_strip:76
msgid ""
"If the DEB_BUILD_OPTIONS environment variable contains \"nostrip\", nothing "
"will be stripped, in accordance with Debian policy."
msgstr ""

# type: =head1
#: dh_strip:79 dh_compress:61 dh_usrlocal:54 dh_perl:58 dh_python:62
msgid "CONFORMS TO"
msgstr ""

# type: textblock
#: dh_strip:81 dh_perl:60
msgid "Debian policy, version 3.0.1"
msgstr ""

# type: textblock
#: dh_installppp:5
msgid "dh_installppp - install ppp ip-up and ip-down files"
msgstr ""

# type: textblock
#: dh_installppp:14
msgid "B<dh_installppp> [S<I<debhelper options>>] [B<--name=>I<name>]"
msgstr ""

# type: textblock
#: dh_installppp:18
msgid ""
"dh_installppp is a debhelper program that is responsible for installing ppp "
"ip-up and ip-down scripts. into package build directories."
msgstr ""

# type: textblock
#: dh_installppp:21
msgid ""
"If a file named debian/package.ppp.ip-up exists, then it is installed into "
"etc/ppp/ip-up.d/package in the package build directory.  Files named "
"debian/package.ppp.ip-down are installed to etc/ppp/ip-down.d/package"
msgstr ""

# type: textblock
#: dh_installppp:32
msgid ""
"Look for files named debian/package.name.ppp.ip-* and install them as "
"etc/ppp/ip-*/name, instead of using the usual files and installing them as "
"the package name."
msgstr ""

# type: textblock
#: dh_compress:5
msgid "dh_compress - compress files and fix symlinks in package build directories"
msgstr ""

# type: textblock
#: dh_compress:15
msgid ""
"B<dh_compress> [S<I<debhelper options>>] [B<-X>I<item>] [B<-A>] [S<I<file "
"...>>]"
msgstr ""

# type: textblock
#: dh_compress:19
msgid ""
"dh_compress is a debhelper program that is responsible for compressing the "
"files in package build directories, and makes sure that any symlinks that "
"pointed to the files before they were compressed are updated to point to the "
"new files."
msgstr ""

# type: textblock
#: dh_compress:24
msgid ""
"By default, dh_compress compresses files that debian policy mandates should "
"be compressed, namely all files in usr/share/info, usr/share/man, "
"usr/X11R6/man, files in usr/share/doc that are larger than 4k in size, "
"(except the copyright file, .html and .css files, and files that appear to "
"be already compressed based on their extensions), and all changelog "
"files. Plus PCF fonts underneath usr/X11R6/lib/X11/fonts/"
msgstr ""

# type: textblock
#: dh_compress:31
msgid ""
"If a debian/package.compress file exists, however, it will be ran as a shell "
"script, and all filenames that the shell script outputs will be compressed "
"instead of the default files. The shell script will be run from inside the "
"package build directory. Note though that using -X is a much better idea in "
"general; you should only use a debian/package.compress file if you really "
"have to."
msgstr ""

# type: textblock
#: dh_compress:44
msgid ""
"Exclude files that contain \"item\" anywhere in their filename from being "
"compressed. For example, -X.jpeg will exclude jpeg files from compression.  "
"You may use this option multiple times to build up a list of things to "
"exclude. You can accomplish the same thing by using a debian/compress file, "
"but this is easier."
msgstr ""

# type: textblock
#: dh_compress:52
msgid ""
"Compress all files specified by command line parameters in ALL packages "
"acted on."
msgstr ""

# type: textblock
#: dh_compress:57
msgid "Add these files to the list of files to compress."
msgstr ""

# type: textblock
#: dh_compress:63
msgid "Debian policy, version 3.0"
msgstr ""

# type: textblock
#: dh_md5sums:5
msgid "dh_md5sums - generate DEBIAN/md5sums file"
msgstr ""

# type: textblock
#: dh_md5sums:15
msgid ""
"B<dh_md5sums> [S<I<debhelper options>>] [B<-x>] [B<-X>I<item>] "
"[B<--include-conffiles>]"
msgstr ""

# type: textblock
#: dh_md5sums:19
msgid ""
"dh_md5sums is a debhelper program that is responsible for generating a "
"DEBIAN/md5sums file, which lists the md5sums of each file in the package.  "
"These files are used by the debsums package."
msgstr ""

# type: textblock
#: dh_md5sums:23
msgid ""
"All files in DEBIAN/ are omitted from the md5sums file, as are all conffiles "
"(unless you use the --include-conffiles switch)."
msgstr ""

# type: textblock
#: dh_md5sums:26
msgid "The md5sums file is installed with proper permissions and ownerships."
msgstr ""

# type: =item
#: dh_md5sums:32
msgid "B<-x>, B<--include-conffiles>"
msgstr ""

# type: textblock
#: dh_md5sums:34
msgid ""
"Include conffiles in the md5sums list. Note that this information is "
"redundant since it is included elsewhere in debian packages."
msgstr ""

# type: textblock
#: dh_md5sums:39
msgid ""
"Exclude files that contain \"item\" anywhere in their filename from being "
"listed in the md5sums file."
msgstr ""

# type: textblock
#: dh_installexamples:5
msgid "dh_installexamples - install example files into package build directories"
msgstr ""

# type: textblock
#: dh_installexamples:14
msgid ""
"B<dh_installexamples> [S<I<debhelper options>>] [B<-A>] [B<-X>I<item>] "
"[S<I<file ...>>]"
msgstr ""

# type: textblock
#: dh_installexamples:18
msgid ""
"dh_installexamples is a debhelper program that is responsible for installing "
"examples into usr/share/doc/package/examples in package build directories."
msgstr ""

# type: textblock
#: dh_installexamples:22
msgid ""
"Any file names specified as parameters will be installed into the first "
"package dh_installexamples is told to act on. By default, this is the first "
"binary package in debian/control, but if you use -p, -i, or -a flags, it "
"will be the first package specified by those flags."
msgstr ""

# type: textblock
#: dh_installexamples:27
msgid "Files named debian/package.examples can list other files to be installed."
msgstr ""

# type: textblock
#: dh_installexamples:35
msgid ""
"Install any files specified by command line parameters in ALL packages acted "
"on."
msgstr ""

# type: textblock
#: dh_installexamples:40
msgid ""
"Install these files as examples into the first package acted on. (Or into "
"all packages if -A is specified.)"
msgstr ""

# type: =item
#: dh_installexamples:43 dh_install:47 dh_movefiles:44 dh_installdocs:64
msgid "B<-Xitem>, B<--exclude=item>"
msgstr ""

# type: textblock
#: dh_installexamples:45 dh_install:49 dh_movefiles:46 dh_installdocs:66
msgid ""
"Exclude files that contain \"item\" anywhere in their filename from being "
"installed."
msgstr ""

# type: textblock
#: dh_installexamples:52
msgid ""
"Note that dh_installexamples will happily copy entire directory hierarchies "
"if you ask it to (similar to cp -a). If it is asked to install a directory, "
"it will install the complete contents of the directory."
msgstr ""

# type: textblock
#: dh_installcron:5
msgid "dh_installcron - install cron scripts into etc/cron.*"
msgstr ""

# type: textblock
#: dh_installcron:14
msgid "B<dh_installcron> [S<B<debhelper options>>] [B<--name=>I<name>]"
msgstr ""

# type: textblock
#: dh_installcron:18
msgid ""
"dh_installcron is a debhelper program that is responsible for installing "
"cron scripts into etc/cron.*/ in package build directories. The files "
"debian/package.cron.daily, debian/package.cron.weekly, "
"debian/package.cron.monthly, debian/package.cron.hourly, and "
"debian/package.cron.d are installed."
msgstr ""

# type: textblock
#: dh_installcron:30
msgid ""
"Look for files named debian/package.name.cron.* and install them as "
"etc/cron.*/name, instead of using the usual files and installing them as the "
"package name."
msgstr ""

# type: textblock
#: dh_installinit:5
msgid "dh_installinit - install init scripts into package build directories"
msgstr ""

# type: textblock
#: dh_installinit:14
msgid ""
"B<dh_installinit> [S<I<debhelper options>>] [B<--name=>I<name>] [B<-n>] "
"[B<-r>] [B<-d>] [S<B<--> I<params>>]"
msgstr ""

# type: textblock
#: dh_installinit:18
msgid ""
"dh_installinit is a debhelper program that is responsible for installing "
"init scripts and associated defaults files into package build directories."
msgstr ""

# type: textblock
#: dh_installinit:21
msgid ""
"It also automatically generates the postinst and postrm and prerm commands "
"needed to set up the symlinks in /etc/rc*.d/ and to start and stop the init "
"scripts."
msgstr ""

# type: textblock
#: dh_installinit:25
msgid ""
"If a file named debian/package.init exists, then it is installed into "
"etc/init.d/package in the package build directory, with \"package\" replaced "
"by the package name."
msgstr ""

# type: textblock
#: dh_installinit:29
msgid ""
"If a file named debian/package.default exists, then it is installed into "
"etc/default/package in the package build directory, with \"package\" "
"replaced by the package name."
msgstr ""

# type: textblock
#: dh_installinit:39
msgid "Do not modify postinst/postrm/prerm scripts."
msgstr ""

# type: =item
#: dh_installinit:41
msgid "B<-r>, B<--no-restart-on-upgrade>"
msgstr ""

# type: textblock
#: dh_installinit:43
msgid "Do not restart init script on upgrade."
msgstr ""

# type: =item
#: dh_installinit:45
msgid "B<--no-start>"
msgstr ""

# type: textblock
#: dh_installinit:47
msgid ""
"Do not start the init script on install or upgrade, or stop it on removal.  "
"Only call update-rc.d. Useful for rcS scripts."
msgstr ""

# type: =item
#: dh_installinit:50
msgid "B<-d>, B<--remove-d>"
msgstr ""

# type: textblock
#: dh_installinit:52
msgid ""
"Remove trailing \"d\" from the name of the package, and use the result for "
"the filename the init script is installed as in etc/init.d/ , and the "
"default file is installed as in etc/default/ . This may be useful for "
"daemons with names ending in \"d\". (Note: this takes precedence over the "
"--init-script parameter described below.)"
msgstr ""

# type: =item
#: dh_installinit:58
msgid "B<-u>I<params> B<--update-rcd-params=>I<params>"
msgstr ""

# type: =item
#: dh_installinit:60 dh_shlibdeps:32 dh_installdebconf:67 dh_builddeb:37 dh_gencontrol:32
msgid "B<--> I<params>"
msgstr ""

# type: textblock
#: dh_installinit:62
msgid ""
"Pass \"params\" to L<update-rc.d(8)>. If not specified, \"defaults\" will be "
"passed to L<update-rc.d(8)>."
msgstr ""

# type: textblock
#: dh_installinit:67
msgid ""
"Install the init script (and default file) using the filename I<name> "
"instead of the default filename, which is the package name. When this "
"parameter is used, dh_installinit looks for and installs files named "
"debian/package.name.init and debian/package.name.default, instead of the "
"usual debian/package.init and debian/package.default."
msgstr ""

# type: =item
#: dh_installinit:73
msgid "B<--init-script=>I<scriptname>"
msgstr ""

# type: textblock
#: dh_installinit:75
msgid ""
"Use \"scriptname\" as the filename the init script is installed as in "
"etc/init.d/ (and also use it as the filename for the defaults file, if it is "
"installed). If you use this parameter, dh_installinit will look to see if a "
"file in the debian/ directory exists that looks like \"package.scriptname\" "
"and if so will install it as the init script in preference to the files it "
"normally installs."
msgstr ""

# type: textblock
#: dh_installinit:82
msgid "This parameter is deprecated, use the --name parameter instead."
msgstr ""

# type: =item
#: dh_installinit:84
msgid "B<--error-handler=>I<function>"
msgstr ""

# type: textblock
#: dh_installinit:86
msgid ""
"Call the named shell function if running the init script fails. The function "
"should be provided in the prerm and postinst scripts, before the #DEBHELPER# "
"token."
msgstr ""

# type: textblock
#: dh_usrlocal:5
msgid "dh_usrlocal - migrate usr/local directories to maintainer scripts"
msgstr ""

# type: textblock
#: dh_usrlocal:17
msgid "B<dh_usrlocal> [S<I<debhelper options>>] [B<-n>]"
msgstr ""

# type: textblock
#: dh_usrlocal:21
msgid ""
"dh_usrlocal is a debhelper program that can be used for building packages "
"that will provide a subdirectory in /usr/local when installed."
msgstr ""

# type: textblock
#: dh_usrlocal:24
msgid ""
"It finds subdirectories of usr/local in the package build directory, and "
"removes them, replacing them with maintainer script snippets (unless B<-n> "
"is used) to create the directories at install time, and remove them when the "
"package is removed, in a manner compliant with Debian policy. See "
"L<dh_installdeb(1)> for an explanation of Debhelper maintainer script "
"snippets."
msgstr ""

# type: textblock
#: dh_usrlocal:31
msgid ""
"If the directories found in the build tree have unusual owners, groups, or "
"permissions, then those values will be preserved in the directories made by "
"the postinst script. However, as a special exception, if a directory is "
"owned by root.root, it will be treated as if it is owned by root.staff and "
"is mode 2775. This is useful, since that is the group and mode policy "
"recommends for directories in /usr/local."
msgstr ""

# type: textblock
#: dh_usrlocal:44
msgid "Do not modify F<postinst>/F<prerm> scripts."
msgstr ""

# type: textblock
#: dh_usrlocal:56
msgid "Debian policy, version 2.2"
msgstr ""

# type: textblock
#: dh_usrlocal:121
msgid "Andrew Stribblehill <ads@debian.org>"
msgstr ""

# type: textblock
#: dh_gconf:5
msgid "dh_gconf - generate GConf schema registration scripts"
msgstr ""

# type: textblock
#: dh_gconf:14
msgid "B<dh_gconf> [S<I<debhelper options>>] [B<-p<package>>]"
msgstr ""

# type: textblock
#: dh_gconf:18
msgid ""
"dh_gconf is a debhelper program that is responsible for registering GConf "
"schemas."
msgstr ""

# type: textblock
#: dh_gconf:21
msgid ""
"It automatically generates the postinst and prerm fragments needed to "
"register and unregister the schemas in usr/share/gconf/schemas.  These "
"fragments will use gconftool-2, so the package should depend on gconf2. This "
"program will add an appropriate dependency to ${misc:Depends}."
msgstr ""

# type: textblock
#: dh_gconf:26
msgid ""
"The postinst script will also signal gconfd-2 so that the newly installed "
"schemas are available straight away."
msgstr ""

# type: textblock
#: dh_gconf:66 dh_scrollkeeper:83 dh_desktop:51
msgid "Ross Burton <ross@burtonini.com>"
msgstr ""

# type: textblock
#: dh_installmodules:5
msgid "dh_installmodules - register modules with modutils"
msgstr ""

# type: textblock
#: dh_installmodules:16
msgid "B<dh_installmodules> [S<I<debhelper options>>] [B<-n>] [B<--name=>I<name>]"
msgstr ""

# type: textblock
#: dh_installmodules:20
msgid ""
"dh_installmodules is a debhelper program that is responsible for registering "
"kernel modules with modutils."
msgstr ""

# type: textblock
#: dh_installmodules:23
msgid ""
"Files named debian/package.modules will be installed as etc/modutils/package "
"in the package build directory. This is for use by modutils. Files named "
"debian/package.modprobe will be installed in etc/modprobe.d/package in the "
"package build directory, to be used by module-init-tools's version of "
"modprobe."
msgstr ""

# type: textblock
#: dh_installmodules:29
msgid ""
"Then postinst and postrm commands are automatically generated to register "
"the modules when the package is installed. See L<dh_installdeb(1)> for an "
"explanation of how this works. Note that this will be done for any package "
"this program acts on which has either a package.modules file, or has .o or "
".ko files in /lib/modules."
msgstr ""

# type: textblock
#: dh_installmodules:41 dh_installmenu:39 dh_installmime:36 dh_makeshlibs:60 dh_python:58
msgid "Do not modify postinst/postrm scripts."
msgstr ""

# type: textblock
#: dh_installmodules:45
msgid ""
"Use \"name\" as the filename the modules file is installed in "
"etc/modutils/. When this parameter is used, dh_installmodules looks for and "
"installs files named debian/package.name.modules instead of the usual "
"debian/package.modules."
msgstr ""

# type: textblock
#: dh_installmenu:5
msgid "dh_installmenu - install debian menu files into package build directories"
msgstr ""

# type: textblock
#: dh_installmenu:14
msgid "B<dh_installmenu> [S<B<debhelper options>>] [B<-n>]"
msgstr ""

# type: textblock
#: dh_installmenu:18
msgid ""
"dh_installmenu is a debhelper program that is responsible for installing "
"files used by the debian menu package into package build directories."
msgstr ""

# type: textblock
#: dh_installmenu:21
msgid ""
"It also automatically generates the postinst and postrm commands needed to "
"interface with the debian menu package. See L<dh_installdeb(1)> for an "
"explanation of how this works."
msgstr ""

# type: textblock
#: dh_installmenu:25
msgid ""
"If a file named debian/package.menu exists, then it is installed into "
"usr/share/menu/package in the package build directory. This is a debian menu "
"file. See L<menufile(5)> for its format."
msgstr ""

# type: textblock
#: dh_installmenu:29
msgid ""
"If a file named debian/package.menu-method exits, then it is installed into "
"etc/menu-methods/package in the package build directory. This is a debian "
"menu method file."
msgstr ""

# type: textblock
#: dh_installmenu:81
msgid "L<debhelper(7)> L<update-menus(1)> L<menufile(5)>"
msgstr ""

# type: textblock
#: dh_installlogrotate:5
msgid "dh_installlogrotate - install logrotate config files"
msgstr ""

# type: textblock
#: dh_installlogrotate:14
msgid "B<dh_installlogrotate> [S<I<debhelper options>>] [B<--name=>I<name>]"
msgstr ""

# type: textblock
#: dh_installlogrotate:18
msgid ""
"dh_installlogrotate is a debhelper program that is responsible for "
"installing logrotate config files into etc/logrotate.d in package build "
"directories.  Files named debian/package.logrotate are installed."
msgstr ""

# type: textblock
#: dh_installlogrotate:28
msgid ""
"Look for files named debian/package.name.logrotate and install them as "
"etc/logrotate.d/name, instead of using the usual files and installing them "
"as the package name."
msgstr ""

# type: textblock
#: debhelper.pod:3
msgid "debhelper - the debhelper tool suite"
msgstr ""

# type: textblock
#: debhelper.pod:7
msgid ""
"B<dh_>I<*> [B<-v>] [B<-a>] [B<-i>] [B<-s>] [B<--no-act>] [B<-ppackage>] "
"[B<-Npackage] [-Ptmpdir>]"
msgstr ""

# type: textblock
#: debhelper.pod:11
msgid ""
"Debhelper is used to help you build a debian package. The philosophy behind "
"debhelper is to provide a collection of small, simple, and easily understood "
"tools that are used in debian/rules to automate various common aspects of "
"building a package. This means less work for you, the packager.  It also, to "
"some degree means that these tools can be changed if debian policy changes, "
"and packages that use them will require only a rebuild to comply with the "
"new policy."
msgstr ""

# type: textblock
#: debhelper.pod:19
msgid ""
"A typical debian/rules file that uses debhelper will call several debhelper "
"commands in sequence. Debhelper commands are all named with a \"dh_\" "
"prefix.  Examples of rules files that use debhelper are in "
"F</usr/share/doc/debhelper/examples/>"
msgstr ""

# type: textblock
#: debhelper.pod:24
msgid ""
"To create a new debian package using debhelper, you can just copy one of the "
"sample rules files and edit it by hand. Or you can try the dh-make package, "
"which contains a L<dh_make|dh_make(1)> command that partially automates the "
"process. For a more gentle introduction, the maint-guide debian package "
"contains a tutorial about making your first package using debhelper."
msgstr ""

# type: =head1
#: debhelper.pod:30
msgid "DEBHELPER COMMANDS"
msgstr ""

# type: textblock
#: debhelper.pod:32
msgid ""
"Here is the complete list of available debhelper commands. See their man "
"pages for additional documentation."
msgstr ""

# type: textblock
#: debhelper.pod:37
msgid "#LIST#"
msgstr ""

# type: textblock
#: debhelper.pod:41
msgid ""
"If a program's name starts with \"dh_\", and the program is not on the above "
"list, then it is not part of the debhelper package, but it should still work "
"like the other programs described on this page."
msgstr ""

# type: =head1
#: debhelper.pod:45
msgid "DEBHELPER CONFIG FILES"
msgstr ""

# type: textblock
#: debhelper.pod:47
msgid ""
"Many debhelper commands make use of files in F<debian/> to control what they "
"do. Besides the common F<debian/changelog> and F<debian/control>, which are "
"in all packages, not just those using debhelper, some additional files can "
"be used to configure the behavior of specific debhelper commands. These "
"files are typically named debian/package.foo (where \"package\" of course, "
"is replaced with the package that is being acted on)."
msgstr ""

# type: textblock
#: debhelper.pod:54
msgid ""
"For example, dh_installdocs uses files named debian/package.docs to list the "
"documentation files it will install. See the man pages of individual "
"commands for details about the names and formats of the files they use.  "
"Generally, these files will list files to act on, one file per line. Some "
"programs in debhelper use pairs of files and destinations or slightly more "
"complicated formats."
msgstr ""

# type: textblock
#: debhelper.pod:61
msgid ""
"Note that if a package is the first (or only) binary package listed in "
"debian/control, debhelper will use debian/foo if no debian/package.foo file "
"can be found."
msgstr ""

# type: textblock
#: debhelper.pod:65
msgid ""
"In some rare cases, you may want to have different versions of these files "
"for different architectures. If files named debian/package.foo.arch exist, "
"where \"arch\" is the same as the output of \"dpkg --print-architecture\", "
"then they will be used in preference to other, more general files."
msgstr ""

# type: textblock
#: debhelper.pod:70
msgid ""
"In many cases, these config files are used to specify various types of "
"files. Documentation or example files to install, files to move, and so on.  "
"When appropriate, in cases like these, you can use standard shell wildcard "
"characters ('?' and '*' and '[..]' character classes) in the files."
msgstr ""

# type: textblock
#: debhelper.pod:75
msgid ""
"You can also put comments in these files; lines beginning with \"#\" are "
"ignored."
msgstr ""

# type: =head1
#: debhelper.pod:78
msgid "SHARED DEBHELPER OPTIONS"
msgstr ""

# type: textblock
#: debhelper.pod:80
msgid "The following command line options are supported by all debhelper programs."
msgstr ""

# type: =item
#: debhelper.pod:84
msgid "B<-v>, B<--verbose>"
msgstr ""

# type: textblock
#: debhelper.pod:86
msgid "Verbose mode: show all commands that modify the package build directory."
msgstr ""

# type: =item
#: debhelper.pod:88
msgid "B<--no-act>"
msgstr ""

# type: textblock
#: debhelper.pod:90
msgid ""
"Do not really do anything. If used with -v, the result is that the command "
"will output what it would have done."
msgstr ""

# type: =item
#: debhelper.pod:93
msgid "B<-a>, B<--arch>"
msgstr ""

# type: textblock
#: debhelper.pod:95
msgid "Act on all architecture dependent packages."
msgstr ""

# type: =item
#: debhelper.pod:97
msgid "B<-i>, B<--indep>"
msgstr ""

# type: textblock
#: debhelper.pod:99
msgid "Act on all architecture independent packages."
msgstr ""

# type: =item
#: debhelper.pod:101
msgid "B<->I<ppackage>, B<--package=>I<package>"
msgstr ""

# type: textblock
#: debhelper.pod:103
msgid ""
"Act on the package named \"package\". This option may be specified multiple "
"times to make debhelper operate on a given set of packages."
msgstr ""

# type: =item
#: debhelper.pod:106
msgid "B<-s>, B<--same-arch>"
msgstr ""

# type: textblock
#: debhelper.pod:108
msgid ""
"This is a smarter version of the -a flag, that is used in some rare "
"circumstances. It understands that if the control file lists \"Architecture: "
"i386\" for the package, the package should not be acted on on other "
"architectures. So this flag makes the command act on all \"Architecture: "
"any\" packages, as well as on any packages that have the current "
"architecture explicitly specified.  Contrast to the -a flag, which makes the "
"command work on all packages that are not architecture independent."
msgstr ""

# type: =item
#: debhelper.pod:116
msgid "B<-N>I<package>, B<--no-package=>I<package>"
msgstr ""

# type: textblock
#: debhelper.pod:118
msgid ""
"Do not act on the specified package even if an -a, -i, or -p option lists "
"the package as one that should be acted on."
msgstr ""

# type: =item
#: debhelper.pod:121
msgid "B<-P>I<tmpdir>, B<--tmpdir=>I<tmpdir>"
msgstr ""

# type: textblock
#: debhelper.pod:123
msgid "Use \"tmpdir\" for package build directory. The default is debian/<package>"
msgstr ""

# type: =item
#: debhelper.pod:125
msgid "B<--mainpackage=>I<package>"
msgstr ""

# type: textblock
#: debhelper.pod:127
msgid ""
"This little-used option changes the package which debhelper considers the "
"\"main package\", that is, the first one listed in debian/control, and the "
"one for which debian/foo files can be used instead of the usual "
"debian/package.foo files."
msgstr ""

# type: =head1
#: debhelper.pod:134
msgid "COMMON DEBHELPER OPTIONS"
msgstr ""

# type: textblock
#: debhelper.pod:136
msgid ""
"The following command line options are supported by some debhelper "
"programs.  See the man page of each program for a complete explanation of "
"what each option does."
msgstr ""

# type: =item
#: debhelper.pod:142
msgid "B<-n>"
msgstr ""

# type: textblock
#: debhelper.pod:144
msgid "Do not modify postinst/postrm/etc scripts."
msgstr ""

# type: textblock
#: debhelper.pod:148
msgid ""
"Exclude an item from processing. This option may be used multiple times, to "
"exclude more than one thing."
msgstr ""

# type: textblock
#: debhelper.pod:153
msgid ""
"Makes files or other items that are specified on the command line take "
"effect in ALL packages acted on, not just the first."
msgstr ""

# type: =head2
#: debhelper.pod:160
msgid "Multiple binary package support"
msgstr ""

# type: textblock
#: debhelper.pod:162
msgid ""
"If your source package generates more than one binary package, debhelper "
"programs will default to acting on all binary packages when run. If your "
"source package happens to generate one architecture dependent package, and "
"another architecture independent package, this is not the correct behavior, "
"because you need to generate the architecture dependent packages in the "
"binary-arch debian/rules target, and the architecture independent packages "
"in the binary-indep debian/rules target."
msgstr ""

# type: textblock
#: debhelper.pod:170
msgid ""
"To facilitate this, as well as give you more control over which packages are "
"acted on by debhelper programs, all debhelper programs accept the B<-a>, "
"B<-i>, B<-p>, and B<-s> parameters. These parameters are cumulative.  If "
"none are given, debhelper programs default to acting on all packages listed "
"in the control file."
msgstr ""

# type: textblock
#: debhelper.pod:176
msgid ""
"See F</usr/share/doc/debhelper/examples/rules.multi> for an example of how "
"to use this in a package that generates multiple binary packages."
msgstr ""

# type: =head2
#: debhelper.pod:179
msgid "Automatic generation of debian install scripts"
msgstr ""

# type: textblock
#: debhelper.pod:181
msgid ""
"Some debhelper commands will automatically generate parts of debian "
"maintainer scripts. If you want these automatically generated things "
"included in your existing debian maintainer scripts, then you need to add "
"\"#DEBHELPER#\" to your scripts, in the place the code should be added.  "
"\"#DEBHELPER#\" will be replaced by any auto-generated code when you run "
"dh_installdeb."
msgstr ""

# type: textblock
#: debhelper.pod:188
msgid ""
"If a script does not exist at all and debhelper needs to add something to "
"it, then debhelper will create the complete script."
msgstr ""

# type: textblock
#: debhelper.pod:191
msgid ""
"All debhelper commands that automatically generate code in this way let it "
"be disabled by the -n parameter (see above)."
msgstr ""

# type: textblock
#: debhelper.pod:194
msgid ""
"Note that the inserted code will be shell code, so you cannot directly use "
"it in a perl script. If you would like to embed it into a perl script, here "
"is one way to do that (note that I made sure that $1, $2, etc are set with "
"the set command):"
msgstr ""

# type: verbatim
#: debhelper.pod:199
#, no-wrap
msgid ""
"  my $temp=\"set -e\\nset -- @ARGV\\n\" . << 'EOF';\n"
"  #DEBHELPER#\n"
"  EOF\n"
"  system ($temp) / 256 == 0\n"
"  \tor die \"Problem with debhelper scripts: $!\";\n"
"\n"
msgstr ""

# type: =head2
#: debhelper.pod:205
msgid "Automatic generation of miscellaneous dependencies."
msgstr ""

# type: textblock
#: debhelper.pod:207
msgid ""
"Some debhelper commands may make the generated package need to depend on "
"some other packages. For example, if you use L<dh_installdebconf(1)>, your "
"package will generally need to depend on debconf. Or if you use "
"L<dh_installxfonts(1)>, your package will generally need to depend on a "
"particular version of xutils. Keeping track of these miscellaneous "
"dependencies can be annoying since they are dependant on how debhelper does "
"things, so debhelper offers a way to automate it."
msgstr ""

# type: textblock
#: debhelper.pod:215
msgid ""
"All commands of this type, besides documenting what dependencies may be "
"needed on their man pages, will automatically generate a substvar called "
"${misc:Depends}. If you put that token into your debian/control file, it "
"will be expanded to the dependencies debhelper figures you need."
msgstr ""

# type: textblock
#: debhelper.pod:220
msgid ""
"This is entirely independent of the standard ${shlibs:Depends} generated by "
"L<dh_makeshlibs(1)>, and the ${perl:Depends} generated by L<dh_perl(1)>.  "
"You can choose not to use any of these, if debhelper's guesses don't match "
"reality."
msgstr ""

# type: =head2
#: debhelper.pod:225
msgid "Package build directories"
msgstr ""

# type: textblock
#: debhelper.pod:227
msgid ""
"By default, all debhelper programs assume that the temporary directory used "
"for assembling the tree of files in a package is debian/<package>."
msgstr ""

# type: textblock
#: debhelper.pod:230
msgid ""
"Sometimes, you might want to use some other temporary directory. This is "
"supported by the -P flag. For example, \"dh_installdocs -Pdebian/tmp\", will "
"use debian/tmp as the temporary directory. Note that if you use -P, the "
"debhelper programs can only be acting on a single package at a time. So if "
"you have a package that builds many binary packages, you will need to also "
"use the -p flag to specify which binary package the debhelper program will "
"act on."
msgstr ""

# type: =head2
#: debhelper.pod:238
msgid "Debhelper compatibility levels"
msgstr ""

# type: textblock
#: debhelper.pod:240
msgid ""
"From time to time, major non-backwards-compatible changes need to be made to "
"debhelper, to keep it clean and well-designed as needs change and its author "
"gains more experience. To prevent such major changes from breaking existing "
"packages, the concept of debhelper compatibility levels was introduced. You "
"tell debhelper which compatibility level it should use, and it modifies its "
"behavior in various ways."
msgstr ""

# type: textblock
#: debhelper.pod:247
msgid ""
"Tell debhelper what compatibility level to use by writing a number to "
"debian/compat. For example, to turn on V5 mode:"
msgstr ""

# type: verbatim
#: debhelper.pod:250
#, no-wrap
msgid ""
"  % echo 5 > debian/compat\n"
"\n"
msgstr ""

# type: textblock
#: debhelper.pod:252
msgid ""
"Unless otherwise indicated, all debhelper documentation assumes that you are "
"using the most recent compatability level, and in most cases does not "
"indicate if the behavior is different in an earlier compatability level, so "
"if you are not using the most recent compatability level, you're advised to "
"read below for notes about what is different in earlier compatability "
"levels."
msgstr ""

# type: textblock
#: debhelper.pod:259
msgid "These are the available compatibility levels:"
msgstr ""

# type: =item
#: debhelper.pod:263
msgid "V1"
msgstr ""

# type: textblock
#: debhelper.pod:265
msgid ""
"This is the original debhelper compatibility level, and so it is the default "
"one. In this mode, debhelper will use debian/tmp as the package tree "
"directory for the first binary package listed in the control file, while "
"using debian/<package> for all other packages listed in the control file."
msgstr ""

# type: textblock
#: debhelper.pod:270 debhelper.pod:277 debhelper.pod:300
msgid "This mode is deprecated."
msgstr ""

# type: =item
#: debhelper.pod:272
msgid "V2"
msgstr ""

# type: textblock
#: debhelper.pod:274
msgid ""
"In this mode, debhelper will consistently use debian/<package> as the "
"package tree directory for every package that is built."
msgstr ""

# type: =item
#: debhelper.pod:279
msgid "V3"
msgstr ""

# type: textblock
#: debhelper.pod:281
msgid "This mode works like V2, with the following additions:"
msgstr ""

# type: =item
#: debhelper.pod:285 debhelper.pod:290 debhelper.pod:294 debhelper.pod:308 debhelper.pod:313 debhelper.pod:318 debhelper.pod:323 debhelper.pod:336 debhelper.pod:340 debhelper.pod:345
msgid "-"
msgstr ""

# type: textblock
#: debhelper.pod:287
msgid ""
"Debhelper config files support globbing via * and ?, when appropriate. To "
"turn this off and use those characters raw, just prefix with a backslash."
msgstr ""

# type: textblock
#: debhelper.pod:292
msgid "dh_makeshlibs makes the postinst and postrm scripts call ldconfig."
msgstr ""

# type: textblock
#: debhelper.pod:296
msgid "Every file in etc/ is automatically flagged as a conffile by dh_installdeb."
msgstr ""

# type: =item
#: debhelper.pod:302
msgid "V4"
msgstr ""

# type: textblock
#: debhelper.pod:304
msgid "Changes from V3 are:"
msgstr ""

# type: textblock
#: debhelper.pod:310
msgid ""
"dh_makeshlibs -V will not include the debian part of the version number in "
"the generated dependency line in the shlibs file."
msgstr ""

# type: textblock
#: debhelper.pod:315
msgid ""
"You are encouraged to put the new ${misc:Depends} into debian/control to "
"supplement the ${shlibs:Depends} field."
msgstr ""

# type: textblock
#: debhelper.pod:320
msgid ""
"dh_fixperms will make all files in bin/ directories and in etc/init.d "
"executable."
msgstr ""

# type: textblock
#: debhelper.pod:325
msgid "dh_link will correct existing links to conform with policy."
msgstr ""

# type: =item
#: debhelper.pod:329
msgid "V5"
msgstr ""

# type: textblock
#: debhelper.pod:331
msgid "This is the recommended mode of operation. It does everything V4 does, plus:"
msgstr ""

# type: textblock
#: debhelper.pod:338
msgid "Comments are ignored in debhelper config files."
msgstr ""

# type: textblock
#: debhelper.pod:342
msgid ""
"dh_strip --dbg-package now specifies the name of a package to put debugging "
"symbols in, not the packages to take the symbols from."
msgstr ""

# type: textblock
#: debhelper.pod:347
msgid "dh_installdocs skips installing empty files."
msgstr ""

# type: =head2
#: debhelper.pod:353
msgid "Doc directory symlinks"
msgstr ""

# type: textblock
#: debhelper.pod:355
msgid ""
"Sometimes it is useful to make a package not contain a "
"/usr/share/doc/package directory at all, instead placing just a dangling "
"symlink in the binary package, that points to some other doc "
"directory. Policy says this is ok if your package depends on the package "
"whose doc directory it uses. To accomplish this, just don't tell debhelper "
"to install any documentation files into the package, and use dh_link to set "
"up the symlink (or do it by hand), and debhelper should do the right thing: "
"notice it is a dangling symlink and not try to install a copyright file or "
"changelog."
msgstr ""

# type: =head2
#: debhelper.pod:364
msgid "udebs"
msgstr ""

# type: textblock
#: debhelper.pod:366
msgid ""
"Debhelper includes support for udebs. To create a udeb with debhelper, add "
"\"XC-Package-Type: udeb\" to the package's stanza in debian/control, and "
"build-depend on debhelper (>= 4.2). Debhelper will try to create udebs that "
"comply with debian-installer policy, by making the generated package files "
"end in \".udeb\", not installing any documentation into a udeb, skipping "
"over preinst, postrm, prerm, and config scripts, etc."
msgstr ""

# type: =head2
#: debhelper.pod:373
msgid "Other notes"
msgstr ""

# type: textblock
#: debhelper.pod:375
msgid ""
"In general, if any debhelper program needs a directory to exist under "
"debian/, it will create it. I haven't bothered to document this in all the "
"man pages, but for example, dh_installdeb knows to make "
"debian/<package>/DEBIAN/ before trying to put files there, dh_installmenu "
"knows you need a debian/<package>/usr/share/menu/ before installing the menu "
"files, etc."
msgstr ""

# type: textblock
#: debhelper.pod:381
msgid ""
"Once your package uses debhelper to build, be sure to add debhelper to your "
"Build-Depends line in debian/control. You should build-depend on a version "
"of debhelper equal to (or greater than) the debhelper compatibility level "
"your package uses. So if your package used compatibility level 5:"
msgstr ""

# type: verbatim
#: debhelper.pod:387
#, no-wrap
msgid ""
"  Build-Depends: debhelper (>= 5)\n"
"\n"
msgstr ""

# type: =head1
#: debhelper.pod:389
msgid "ENVIRONMENT"
msgstr ""

# type: =item
#: debhelper.pod:393
msgid "DH_VERBOSE"
msgstr ""

# type: textblock
#: debhelper.pod:395
msgid ""
"Set to 1 to enable verbose mode. Debhelper will output every command it runs "
"that modifies files on the build system."
msgstr ""

# type: =item
#: debhelper.pod:398
msgid "DH_COMPAT"
msgstr ""

# type: textblock
#: debhelper.pod:400
msgid ""
"Temporarily specifies what compatibility level debhelper should run at, "
"overriding any value in debian/compat."
msgstr ""

# type: =item
#: debhelper.pod:403
msgid "DH_NO_ACT"
msgstr ""

# type: textblock
#: debhelper.pod:405
msgid "Set to 1 to enable no-act mode."
msgstr ""

# type: =item
#: debhelper.pod:407
msgid "DH_OPTIONS"
msgstr ""

# type: textblock
#: debhelper.pod:409
msgid ""
"Anything in this variable will be prepended to the command line arguments of "
"all debhelper commands. This is useful in some situations, for example, if "
"you need to pass -p to all debhelper commands that will be run. One good way "
"to set DH_OPTIONS is by using \"Target-specific Variable Values\" in your "
"debian/rules file. See the make documentation for details on doing this."
msgstr ""

# type: =item
#: debhelper.pod:415
msgid "DH_ALWAYS_EXCLUDE"
msgstr ""

# type: textblock
#: debhelper.pod:417
msgid ""
"If set, this adds the value the variable is set to to the -X options of all "
"commands that support the -X option. Moreover, dh_builddeb will rm -rf "
"anything that matches the value in your package build tree."
msgstr ""

# type: textblock
#: debhelper.pod:421
msgid ""
"This can be useful if you are doing a build from a CVS source tree, in which "
"case setting DH_ALWAYS_EXCLUDE=CVS will prevent any CVS directories from "
"sneaking into the package you build. Or, if a package has a source tarball "
"that (unwisely) includes CVS directories, you might want to export "
"DH_ALWAYS_EXCLUDE=CVS in debian/rules, to make it take effect wherever your "
"package is built."
msgstr ""

# type: textblock
#: debhelper.pod:428
msgid ""
"Multiple things to exclude can be separated with colons, as in "
"DH_ALWAYS_EXCLUDE=CVS:.svn"
msgstr ""

# type: =item
#: debhelper.pod:437
msgid "F</usr/share/doc/debhelper/examples/>"
msgstr ""

# type: textblock
#: debhelper.pod:439
msgid "A set of example debian/rules files that use debhelper."
msgstr ""

# type: =item
#: debhelper.pod:441
msgid "L<http://kitenet.net/programs/debhelper/>"
msgstr ""

# type: textblock
#: debhelper.pod:443
msgid "Debhelper web site."
msgstr ""

# type: textblock
#: dh_clean:5
msgid "dh_clean - clean up package build directories"
msgstr ""

# type: textblock
#: dh_clean:14
msgid ""
"B<dh_clean> [S<I<debhelper options>>] [B<-k>] [B<-d>] [B<-X>I<item>] "
"[S<I<file ...>>]"
msgstr ""

# type: verbatim
#: dh_clean:18
#, no-wrap
msgid ""
"dh_clean is a debhelper program that is responsible for cleaning up after "
"a\n"
"package is built. It removes the package build directories, and removes "
"some\n"
"other files including debian/files, and any detritus left behind by other\n"
"debhelper commands. It also removes common files that should not appear in "
"a\n"
"debian diff:\n"
"  #*# *~ DEADJOE *.orig *.rej *.SUMS TAGS core .deps/* *.P\n"
"\n"
msgstr ""

# type: =item
#: dh_clean:29 dh_installchangelogs:44
msgid "B<-k>, B<--keep>"
msgstr ""

# type: textblock
#: dh_clean:31
msgid ""
"Do not delete debian/files. When do you want to use this? Anytime you have a "
"debian/rules that has 2 binary targets that build different .deb packages; "
"for example, one target is binary-arch, and the other is binary-indep, or "
"one target builds the shared library, and the other the -dev package. If you "
"didn't use -k in these cases, then debian/files would be deleted in the "
"middle, and your changes file will only contain the last binary package that "
"was built."
msgstr ""

# type: =item
#: dh_clean:39
msgid "B<-d>, B<--dirs-only>"
msgstr ""

# type: textblock
#: dh_clean:41
msgid ""
"Only clean the package build directories, do not clean up any other files at "
"all."
msgstr ""

# type: =item
#: dh_clean:44
msgid "B<-X>I<item> B<--exclude=>I<item>"
msgstr ""

# type: textblock
#: dh_clean:46
msgid ""
"Exclude files that contain \"item\" anywhere in their filename from being "
"deleted, even if they would normally be deleted. You may use this option "
"multiple times to build up a list of things to exclude."
msgstr ""

# type: textblock
#: dh_clean:52
msgid "Delete these files too."
msgstr ""

# type: textblock
#: dh_undocumented:5
msgid "dh_undocumented - obsolete undocumented.7 symlink program"
msgstr ""

# type: textblock
#: dh_undocumented:14 dh_suidregister:9
msgid "Do not run!"
msgstr ""

# type: textblock
#: dh_undocumented:18
msgid ""
"This program used to make symlinks to the undocumented.7 man page for man "
"pages not present in a package. Debian policy now frowns on use of the "
"undocumented.7 man page, and so this program does nothing, and should not be "
"used."
msgstr ""

# type: textblock
#: dh_testversion:5
msgid "dh_testversion - ensure that the correct version of debhelper is installed"
msgstr ""

# type: textblock
#: dh_testversion:14
msgid "B<dh_testversion> [S<I<debhelper options>>] [I<operator>] [I<version>]"
msgstr ""

# type: textblock
#: dh_testversion:18
msgid "Note: This program is deprecated. You should use build dependencies instead."
msgstr ""

# type: textblock
#: dh_testversion:21
msgid ""
"dh_testversion compares the version of debhelper against the version you "
"specify, and if the condition is not met, exits with an error message."
msgstr ""

# type: textblock
#: dh_testversion:24
msgid ""
"You can use this in your debian/rules files if a new debhelper feature is "
"introduced, and your package requires that feature to build correctly. Use "
"debhelper's changelog to figure out the version you need."
msgstr ""

# type: textblock
#: dh_testversion:28
msgid ""
"Be sure not to overuse dh_testversion. If debhelper version 9.5 introduces a "
"new dh_autofixbugs command, and your package uses it, then if someone tries "
"to build it with debhelper 1.0, the build will fail anyway when "
"dh_autofixbugs cannot be found, so there is no need for you to use "
"dh_testversion."
msgstr ""

# type: =item
#: dh_testversion:38
msgid "I<operator>"
msgstr ""

# type: textblock
#: dh_testversion:40
msgid ""
"Optional comparison operator used in comparing the versions. If not "
"specified, \">=\" is used. For descriptions of the comparison operators, see "
"dpkg --help."
msgstr ""

# type: =item
#: dh_testversion:44
msgid "I<version>"
msgstr ""

# type: textblock
#: dh_testversion:46
msgid ""
"Version number to compare against the current version of debhelper. If not "
"specified, dh_testversion does nothing."
msgstr ""

# type: textblock
#: dh_testdir:5
msgid "dh_testdir - test directory before building debian package"
msgstr ""

# type: textblock
#: dh_testdir:14
msgid "B<dh_testdir> [S<I<debhelper options>>] [S<I<file ...>>]"
msgstr ""

# type: textblock
#: dh_testdir:18
msgid ""
"dh_testdir tries to make sure that you are in the correct directory when "
"building a debian package. It makes sure that the file debian/control "
"exists, as well as any other files you specify. If not, it exits with an "
"error."
msgstr ""

# type: textblock
#: dh_testdir:29
msgid "Test for the existence of these files too."
msgstr ""

# type: textblock
#: dh_shlibdeps:5
msgid "dh_shlibdeps - calculate shared library dependencies"
msgstr ""

# type: textblock
#: dh_shlibdeps:15
msgid ""
"B<dh_shlibdeps> [S<I<debhelper options>>] [B<-L>I<package>] "
"[B<-l>I<directory>] [B<-X>I<item>] [S<B<--> I<params>>]"
msgstr ""

# type: textblock
#: dh_shlibdeps:19
msgid ""
"dh_shlibdeps is a debhelper program that is responsible for calculating "
"shared library dependencies for packages."
msgstr ""

# type: textblock
#: dh_shlibdeps:22
msgid ""
"This program is merely a wrapper around L<dpkg-shlibdeps(1)> that calls it "
"once for each package listed in the control file, passing it a list of ELF "
"executables and shared libraries it has found."
msgstr ""

# type: =item
#: dh_shlibdeps:30
msgid "B<-u>I<params>, B<--dpkg-shlibdeps-params=>I<params>"
msgstr ""

# type: textblock
#: dh_shlibdeps:34
msgid "Pass \"params\" to L<dpkg-shlibdeps(1)>."
msgstr ""

# type: textblock
#: dh_shlibdeps:38
msgid ""
"Exclude files that contain \"item\" anywhere in their filename from being "
"passed to dpkg-shlibdeps. This will make their dependencies be ignored.  "
"This may be useful in some situations, but use it with caution. This option "
"may be used more than once to exclude more than one thing."
msgstr ""

# type: =item
#: dh_shlibdeps:43
msgid "B<-l>I<directory>[:directory:directory:..]"
msgstr ""

# type: textblock
#: dh_shlibdeps:45
msgid ""
"Before dpkg-shlibdeps is run, LD_LIBRARY_PATH will have added to it the "
"specified directory (or directories -- separate with colons). This is useful "
"for multi-binary packages where a library is built in one package and "
"another package contains binaries linked against said library. Relative "
"paths will be made absolute for the benefit of dpkg-shlibdeps."
msgstr ""

# type: textblock
#: dh_shlibdeps:52
msgid ""
"Note that the directory given should be the complete or relative path to a "
"directory that contains the library. See example below."
msgstr ""

# type: =item
#: dh_shlibdeps:55
msgid "B<-L>I<package>, B<--libpackage=>I<package>"
msgstr ""

# type: textblock
#: dh_shlibdeps:57
msgid ""
"Use the shlibs file automatically generated by dh_makeshlibs for the named "
"package as a kind of automatically generated shlibs.local file. You can use "
"this switch in concert with the -l switch to make dpkg-shlibdeps find a "
"library built as part of the current package, and get the shlibs "
"information.  See example below."
msgstr ""

# type: =head1
#: dh_shlibdeps:65 dh_link:65 dh_makeshlibs:69 dh_installdocs:76
msgid "EXAMPLES"
msgstr ""

# type: textblock
#: dh_shlibdeps:67
msgid ""
"Suppose that your source package produces libfoo1, libfoo-dev, and "
"libfoo-bin binary packages. libfoo-bin links against libfoo1, and should "
"depend on it. In your rules file, first run dh_makeshlibs, then "
"dh_shlibdeps:"
msgstr ""

# type: verbatim
#: dh_shlibdeps:71
#, no-wrap
msgid ""
"\tdh_makeshlibs\n"
"\tdh_shlibdeps -L libfoo1 -l debian/libfoo1/usr/lib\n"
"\n"
msgstr ""

# type: textblock
#: dh_shlibdeps:74
msgid ""
"This will have the effect of generating automatically a shlibs file for "
"libfoo1, and using that file and the libfoo1 library in the "
"debian/libfoo1/usr/lib directory to calculate shared library dependency "
"information."
msgstr ""

# type: textblock
#: dh_shlibdeps:150
msgid "L<debhelper(7)>, L<dpkg-shlibdeps(1)>"
msgstr ""

# type: textblock
#: dh_scrollkeeper:5
msgid "dh_scrollkeeper - generate ScrollKeeper registration scripts"
msgstr ""

# type: textblock
#: dh_scrollkeeper:14
msgid "B<dh_scrollkeeper> [S<I<debhelper options>>] [B<-n>] [S<I<directory>>]"
msgstr ""

# type: textblock
#: dh_scrollkeeper:18
msgid ""
"B<dh_scrollkeeper> is a debhelper program that handles correctly registering "
"OMF files that it finds in package build trees with ScrollKeeper."
msgstr ""

# type: textblock
#: dh_scrollkeeper:22
msgid ""
"This command automatically adds maintainer script snippets for registering "
"and unregistering files with ScrollKeeper (unless B<-n> is used). See "
"L<dh_installdeb(1)> for an explanation of Debhelper maintainer script "
"snippets."
msgstr ""

# type: textblock
#: dh_scrollkeeper:27
msgid ""
"It will also change any DTD declarations in the OMF and DocBook files to "
"refer to local files instead of remote URLs. This change does not modify the "
"source files, but the files in the package build tree."
msgstr ""

# type: textblock
#: dh_scrollkeeper:37
msgid "Do not modify F<postinst>/F<postrm> scripts."
msgstr ""

# type: textblock
#: dh_scrollkeeper:77 dh_desktop:45
msgid "L<debhelper>"
msgstr ""

# type: textblock
#: dh_installdirs:5
msgid "dh_installdirs - create subdirectories in package build directories"
msgstr ""

# type: textblock
#: dh_installdirs:14
msgid "B<dh_installdirs> [S<I<debhelper options>>] [B<-A>] [S<I<dir ...>>]"
msgstr ""

# type: textblock
#: dh_installdirs:18
msgid ""
"dh_installdirs is a debhelper program that is responsible for creating "
"subdirectories in package build directories."
msgstr ""

# type: textblock
#: dh_installdirs:21
msgid ""
"Any directory names specified as parameters will be created in the package "
"build directory of the first package dh_installdirs is told to act on. By "
"default, this is the first binary package in debian/control, but if you use "
"-p, -i, or -a flags, it will be the first package specified by those flags."
msgstr ""

# type: textblock
#: dh_installdirs:26
msgid ""
"A file named debian/package.dirs can list other directories to be created.  "
"Separate the directory names with whitespace."
msgstr ""

# type: textblock
#: dh_installdirs:29
msgid ""
"Be sure to only use directory names relative to the package build "
"directory. Ie, \"/usr/bin\" should not be used, use \"usr/bin\" instead."
msgstr ""

# type: textblock
#: dh_installdirs:38
msgid ""
"Create any directories specified by command line parameters in ALL packages "
"acted on, not just the first."
msgstr ""

# type: =item
#: dh_installdirs:41
msgid "I<dir ...>"
msgstr ""

# type: textblock
#: dh_installdirs:43
msgid ""
"Create these directories in the package build directory of the first package "
"acted on. (Or in all packages if -A is specified.)"
msgstr ""

# type: textblock
#: dh_link:5
msgid "dh_link - create symlinks in package build directories"
msgstr ""

# type: textblock
#: dh_link:15
msgid "B<dh_link> [S<I<debhelper options>>] [B<-A>] [S<I<source destination ...>>]"
msgstr ""

# type: textblock
#: dh_link:19
msgid ""
"dh_link is a debhelper program that creates symlinks in package build "
"directories."
msgstr ""

# type: textblock
#: dh_link:22
msgid ""
"dh_link accepts a list of pairs of source and destination files. The source "
"files are the already existing files that will be symlinked from. The "
"destination files are the symlinks that will be created. There B<must> be an "
"equal number of source and destination files specified."
msgstr ""

# type: textblock
#: dh_link:27
msgid ""
"The list can be specified in two ways. A file named debian/package.links can "
"list pairs of files. If you use this file, you should put each pair of files "
"on its own line, and separate the files within the pair with "
"whitespace. Also, pairs of files can be specified as parameters - these "
"pairs will only be created in the package build directory of the first "
"package dh_link is told to act on. By default, this is the first binary "
"package in debian/control, but if you use -p, -i, or -a flags, it will be "
"the first package specified by those flags."
msgstr ""

# type: textblock
#: dh_link:36
msgid ""
"Be sure you B<do> specify the full filename to both the source and "
"destination files (unlike you would do if you were using something like "
"L<ln(1)>)."
msgstr ""

# type: textblock
#: dh_link:40
msgid ""
"dh_link will generate symlinks that comply with debian policy - absolute "
"when policy says they should be absolute, and relative links with as short a "
"path as possible. It will also create any subdirectories it needs to to put "
"the symlinks in."
msgstr ""

# type: textblock
#: dh_link:45
msgid ""
"dh_link also scans the package build tree for existing symlinks which do not "
"conform to debian policy, and corrects them (v4 only)."
msgstr ""

# type: textblock
#: dh_link:54
msgid ""
"Create any links specified by command line parameters in ALL packages acted "
"on, not just the first."
msgstr ""

# type: =item
#: dh_link:57
msgid "I<source destination ...>"
msgstr ""

# type: textblock
#: dh_link:59
msgid ""
"Create a file named \"destination\" as a link to a file named \"source\". Do "
"this in the package build directory of the first package acted on.  (Or in "
"all packages if -A is specified.)"
msgstr ""

# type: verbatim
#: dh_link:67
#, no-wrap
msgid ""
" dh_link usr/share/man/man1/foo.1 usr/share/man/man1/bar.1\n"
"\n"
msgstr ""

# type: textblock
#: dh_link:69
msgid "Make bar.1 be a symlink to foo.1"
msgstr ""

# type: verbatim
#: dh_link:71
#, no-wrap
msgid ""
" dh_link var/lib/foo usr/lib/foo \\\n"
"   usr/X11R6/man/man1/foo.1x usr/share/man/man1/bar.1\n"
"\n"
msgstr ""

# type: textblock
#: dh_link:74
msgid ""
"Make /usr/lib/foo/ be a link to /var/lib/foo/, and bar.1 be a symlink to the "
"X man page foo.1x"
msgstr ""

# type: textblock
#: dh_installdebconf:5
msgid ""
"dh_installdebconf - install files used by debconf in package build "
"directories"
msgstr ""

# type: textblock
#: dh_installdebconf:14
msgid "B<dh_installdebconf> [S<I<debhelper options>>] [B<-n>] [S<B<--> I<params>>]"
msgstr ""

# type: textblock
#: dh_installdebconf:18
msgid ""
"dh_installdebconf is a debhelper program that is responsible for installing "
"files used by the debconf package into package build directories."
msgstr ""

# type: textblock
#: dh_installdebconf:21
msgid ""
"It also automatically generates the postrm commands needed to interface with "
"debconf. See L<dh_installdeb(1)> for an explanation of how that works."
msgstr ""

# type: textblock
#: dh_installdebconf:25
msgid ""
"Files named debian/package.config and debian/package.templates are installed "
"into the DEBIAN directory in the package build directory.  If a file named "
"debian/package.config.debhelper exists, the contents of that file are merged "
"into the config script as follows: If the script exists, then anywhere in it "
"that \"#DEBHELPER#\" appears, the text of the .debhelper file is "
"inserted. If the script does not exist, then a script is generated from the "
".debhelper file. The .debhelper files may be created by other debhelper "
"programs, and are shell script fragments."
msgstr ""

# type: textblock
#: dh_installdebconf:34
msgid ""
"Note that if you use debconf, your package probably needs to depend on it "
"(it will be added to ${misc:Depends} by this program)."
msgstr ""

# type: textblock
#: dh_installdebconf:37
msgid ""
"Note that for your config script to be called by dpkg, your postinst needs "
"to source debconf's confmodule. dh_installdebconf does not install this "
"statement into postinst automatically as it it too hard to do it right."
msgstr ""

# type: =head1
#: dh_installdebconf:42
msgid "LOCALIZED TEMPLATE FILES"
msgstr ""

# type: textblock
#: dh_installdebconf:44
msgid ""
"Debconf also supports localized template files, and this program has some "
"support to aid is working with them. It is best to keep the translations in "
".po files under debian/po, and merge them only at build time. See "
"L<po2debconf(1)> and L<debconf-getlang(1)> for details."
msgstr ""

# type: textblock
#: dh_installdebconf:49
msgid ""
"This program will look to see if you have a debian/po directory and if so "
"will automatically call L<po2debconf(1)> to generate a merged templates "
"file. Or if you have debian/templates.ll files, it will use the older "
"L<debconf-mergetemplate(1)> program to merge those together."
msgstr ""

# type: textblock
#: dh_installdebconf:54
msgid ""
"Note that if your package has a debian/po directory it should build-depend "
"on po-debconf."
msgstr ""

# type: textblock
#: dh_installdebconf:56
msgid ""
"For example, if you have a German translation, strings from debian/po/de.po "
"are merged with debian/package.templates."
msgstr ""

# type: textblock
#: dh_installdebconf:65
msgid "Do not modify postrm script."
msgstr ""

# type: textblock
#: dh_installdebconf:69
msgid ""
"Pass the params to po2debconf, if it is run or debconf-mergetemplate, if it "
"is run."
msgstr ""

# type: textblock
#: dh_installmime:5
msgid "dh_installmime - install mime files into package build directories"
msgstr ""

# type: textblock
#: dh_installmime:14
msgid "B<dh_installmime> [S<I<debhelper options>>] [B<-n>]"
msgstr ""

# type: textblock
#: dh_installmime:18
msgid ""
"dh_installmime is a debhelper program that is responsible for installing "
"mime files into package build directories."
msgstr ""

# type: textblock
#: dh_installmime:21
msgid ""
"It also automatically generates the postinst and postrm commands needed to "
"interface with the debian mime-support and shared-mime-info packages.  See "
"L<dh_installdeb(1)> for an explanation of how this works."
msgstr ""

# type: textblock
#: dh_installmime:25
msgid ""
"If files named debian/package.mime or debian/package.sharedmimeinfo exist, "
"then they are installed into usr/lib/mime/packages/package and "
"/usr/share/mime/packages/package.xml (respectively) in the package build "
"directory."
msgstr ""

# type: textblock
#: dh_installwm:5
msgid "dh_installwm - register a window manager"
msgstr ""

# type: textblock
#: dh_installwm:14
msgid ""
"B<dh_installwm> [S<I<debhelper options>>] [B<-n>] [B<--priority=>I<n>] "
"[S<I<wm ...>>]"
msgstr ""

# type: textblock
#: dh_installwm:18
msgid ""
"dh_installwm is a debhelper program that is responsible for generating the "
"postinst and postrm commands that register a window manager with "
"L<update-alternatives(8)>"
msgstr ""

# type: textblock
#: dh_installwm:22
msgid ""
"Any window manager programs specified as parameters will be registered in "
"the first package dh_installwm is told to act on. By default, this is the "
"first binary package in debian/control, but if you use -p, -i, or -a flags, "
"it will be the first package specified by those flags."
msgstr ""

# type: textblock
#: dh_installwm:27
msgid ""
"Files named debian/package.wm can list other window manager programs to "
"register."
msgstr ""

# type: textblock
#: dh_installwm:36
msgid ""
"Set the priority of the window manager. Default is 20, which is too low for "
"most window managers; see the Debian Policy document for instructions on "
"calculating the correct value."
msgstr ""

# type: textblock
#: dh_installwm:42
msgid "Do not modify postinst/postrm scripts. Turns this command into a no-op."
msgstr ""

# type: =item
#: dh_installwm:44
msgid "I<wm ...>"
msgstr ""

# type: textblock
#: dh_installwm:46
msgid ""
"The commands used to run the window manager or window managers you want to "
"register."
msgstr ""

# type: textblock
#: dh_installdeb:5
msgid "dh_installdeb - install files into the DEBIAN directory"
msgstr ""

# type: textblock
#: dh_installdeb:14
msgid "B<dh_installdeb> [S<I<debhelper options>>]"
msgstr ""

# type: textblock
#: dh_installdeb:18
msgid ""
"dh_installdeb is a debhelper program that is responsible for installing "
"files into the DEBIAN directories in package build directories with the "
"correct permissions."
msgstr ""

# type: verbatim
#: dh_installdeb:22
#, no-wrap
msgid ""
"dh_installdeb automatically installs the following files from debian/ into\n"
"the DEBIAN directory:\n"
"  package.postinst\n"
"  package.preinst\n"
"  package.postrm\n"
"  package.prerm\n"
"  package.shlibs\n"
"  package.conffiles\n"
"\n"
msgstr ""

# type: textblock
#: dh_installdeb:31
msgid ""
"The postinst, preinst, postrm, and prerm are handled specially: If a "
"corresponding file named debian/package.script.debhelper exists, the "
"contents of that file are merged into the script as follows: If the script "
"exists, then anywhere in it that \"#DEBHELPER#\" appears, the text of the "
".debhelper file is inserted. If the script does not exist, then a script is "
"generated from the .debhelper file. The .debhelper files are created by "
"other debhelper programs, such as L<dh_installmenu(1)>, and are shell script "
"fragments."
msgstr ""

# type: textblock
#: dh_installdeb:39
msgid ""
"In V3 compatibility mode and higher, all files in the etc/ directory in a "
"package will automatically be flagged as conffiles by this program, so there "
"is no need to list them manually in package.conffiles."
msgstr ""

# type: textblock
#: dh_builddeb:5
msgid "dh_builddeb - build debian packages"
msgstr ""

# type: textblock
#: dh_builddeb:14
msgid ""
"B<dh_builddeb> [S<I<debhelper options>>] [B<--destdir=>I<directory>] "
"[B<--filename=>I<name>] [S<B<--> I<params>>]"
msgstr ""

# type: textblock
#: dh_builddeb:18
msgid ""
"dh_builddeb simply calls L<dpkg-deb(8)> to build a debian package or "
"packages."
msgstr ""

# type: =item
#: dh_builddeb:25
msgid "B<--destdir=>I<directory>"
msgstr ""

# type: textblock
#: dh_builddeb:27
msgid ""
"Use this if you want the generated .deb files to be put in a directory other "
"than the default of \"..\""
msgstr ""

# type: =item
#: dh_builddeb:30
msgid "B<--filename=>I<name>"
msgstr ""

# type: textblock
#: dh_builddeb:32
msgid ""
"Use this if you want to force the generated .deb file to have a particular "
"file name. Does not work well if more than one .deb is generated!"
msgstr ""

# type: =item
#: dh_builddeb:35
msgid "B<-u>I<params>"
msgstr ""

# type: textblock
#: dh_builddeb:39
msgid "Pass I<params> to L<dpkg-deb(1)> when it is used to build the package."
msgstr ""

# type: textblock
#: dh_gencontrol:5
msgid "dh_gencontrol - generate and install control file"
msgstr ""

# type: textblock
#: dh_gencontrol:14
msgid "B<dh_gencontrol> [S<I<debhelper options>>] [S<B<--> I<params>>]"
msgstr ""

# type: textblock
#: dh_gencontrol:18
msgid ""
"dh_gencontrol is a debhelper program that is responsible for generating "
"control files, and installing them into the DEBIAN directory with the proper "
"permissions."
msgstr ""

# type: textblock
#: dh_gencontrol:22
msgid ""
"This program is merely a wrapper around L<dpkg-gencontrol(1)>, which calls "
"it once for each package being acted on, and passes in some additional "
"useful flags including \"-isp\"."
msgstr ""

# type: =item
#: dh_gencontrol:30
msgid "B<-u>I<params>, B<--dpkg-gencontrol-params>I<params>"
msgstr ""

# type: textblock
#: dh_gencontrol:34
msgid "Pass \"params\" to L<dpkg-gencontrol(1)>."
msgstr ""

# type: textblock
#: dh_install:5
msgid "dh_install - install files into package build directories"
msgstr ""

# type: textblock
#: dh_install:15
msgid ""
"B<dh_install> [B<-X>I<item>] [B<--autodest>] [B<--sourcedir=>I<dir>] "
"[S<I<debhelper options>>] [S<I<file [...] dest>>]"
msgstr ""

# type: textblock
#: dh_install:19
msgid ""
"dh_install is a debhelper program that handles installing files into package "
"build directories. There are many dh_install* commands that handle "
"installing specific types of files such as documentation, examples, man "
"pages, and so on, and they should be used when possible as they often have "
"extra intelligence for those particular tasks. dh_install, then, is useful "
"for installing everything else, for which no particular intelligence is "
"needed. It is a replacement for the old dh_movefiles command."
msgstr ""

# type: textblock
#: dh_install:27
msgid ""
"Files named debian/package.install list the files to install into each "
"package and the directory they should be installed to. The format is a set "
"of lines, where each line lists a file or files to install, and at the end "
"of the line tells the directory it should be installed in. The name of the "
"files (or directories) to install should be given relative to the current "
"directory, while the installation directory is given relative to the package "
"build directory. You may use wildcards in the names of the files to install "
"(in v3 mode and above)."
msgstr ""

# type: textblock
#: dh_install:36
msgid ""
"This program may be used in one of two ways. If you just have a file or two "
"that the upstream Makefile does not install for you, you can run dh_install "
"on them to move them into place. On the other hand, maybe you have a large "
"package that builds multiple binary packages. You can use the upstream "
"Makefile to install it all into debian/tmp, and then use dh_install to copy "
"directories and files from there into the proper package build directories."
msgstr ""

# type: =item
#: dh_install:52
msgid "B<--autodest>"
msgstr ""

# type: textblock
#: dh_install:54
msgid ""
"Guess as the destination directory to install things to. If this is "
"specified, you should not list destination directories in "
"debian/package.install files or on the command line. Instead, dh_install "
"will guess as follows:"
msgstr ""

# type: textblock
#: dh_install:59
msgid ""
"Strip off debian/tmp (or the sourcedir if one is given) from the front of "
"the filename, if it is present, and install into the dirname of the "
"filename. So if the filename is debian/tmp/usr/bin, then that directory will "
"be copied to debian/package/usr/. If the filename is debian/tmp/etc/passwd, "
"it will be copied to debian/package/etc/."
msgstr ""

# type: textblock
#: dh_install:65
msgid ""
"Note that if you list exactly one filename or wildcard-pattern on a line by "
"itself in a debian/package.install file, with no explicit destination, then "
"dh_install will automatically guess the destination even if this flag is not "
"set."
msgstr ""

# type: =item
#: dh_install:70
msgid "B<--list-missing>"
msgstr ""

# type: textblock
#: dh_install:72
msgid ""
"This option makes dh_install keep track of the files it installs, and then "
"at the end, compare that list with the files in the source directory. If any "
"of the files (and symlinks) in the source directory were not installed to "
"somewhere, it will warn on stderr about that."
msgstr ""

# type: textblock
#: dh_install:77
msgid ""
"This may be useful if you have a large package and want to make sure that "
"you don't miss installing newly added files in new upstream releases."
msgstr ""

# type: textblock
#: dh_install:80
msgid ""
"Note that files that are excluded from being moved via the -X option are not "
"warned about."
msgstr ""

# type: =item
#: dh_install:83
msgid "B<--fail-missing>"
msgstr ""

# type: textblock
#: dh_install:85
msgid ""
"This option is like --list-missing, except if a file was missed, it will not "
"only list the missing files, but also fail with a nonzero exit code."
msgstr ""

# type: =item
#: dh_install:88
msgid "B<--sourcedir=dir>"
msgstr ""

# type: textblock
#: dh_install:90
msgid ""
"Makes all source files be found under dir. If this is specified, it is akin "
"to all the source filenames having \"dir/\" prepended to them."
msgstr ""

# type: textblock
#: dh_install:93
msgid ""
"To make dh_install behave like the old dh_movefiles, move your package.files "
"file to package.install and call dh_install with \"--sourcedir=debian/tmp\" "
"appended to the command. This will approximate dh_movefiles behaviour, "
"except it will copy files instead of moving them."
msgstr ""

# type: =item
#: dh_install:99
msgid "I<file [...] dest>"
msgstr ""

# type: textblock
#: dh_install:101
msgid ""
"Lists files (or directories) to install and where to install them to.  The "
"files will be installed into the first package dh_install acts on."
msgstr ""

# type: =head1
#: dh_install:224
msgid "EXAMPLE"
msgstr ""

# type: textblock
#: dh_install:226
msgid ""
"Suppose your package's upstream Makefile installs a binary, a man page, and "
"a library into appropriate subdirectories of debian/tmp. You want to put the "
"library into package libfoo, and the rest into package foo. Your rules file "
"will run \"dh_install --sourcedir=debian/tmp\". Make debian/foo.install "
"contain:"
msgstr ""

# type: verbatim
#: dh_install:232
#, no-wrap
msgid ""
"  usr/bin\n"
"  usr/share/man/man1\n"
"\n"
msgstr ""

# type: textblock
#: dh_install:235
msgid "While debian/libfoo.install contains:"
msgstr ""

# type: verbatim
#: dh_install:237
#, no-wrap
msgid ""
"  usr/lib/libfoo*.so.*\n"
"\n"
msgstr ""

# type: textblock
#: dh_install:239
msgid ""
"If you want a libfoo-dev package too, debian/libfoo-dev.install might "
"contain:"
msgstr ""

# type: verbatim
#: dh_install:241
#, no-wrap
msgid ""
"  usr/include\n"
"  usr/lib/libfoo*.so\n"
"  usr/share/man/man3\n"
"\n"
msgstr ""

# type: =head1
#: dh_install:245
msgid "LIMITATIONS"
msgstr ""

# type: verbatim
#: dh_install:247
#, no-wrap
msgid ""
"dh_install cannot rename files or directories, it can only install them\n"
"with the names they already have into wherever you want in the package\n"
"build tree.\n"
"  \n"
msgstr ""

# type: textblock
#: dh_makeshlibs:5
msgid "dh_makeshlibs - automatically create shlibs file"
msgstr ""

# type: textblock
#: dh_makeshlibs:14
msgid ""
"B<dh_makeshlibs> [S<I<debhelper options>>] [B<-m>I<major>] "
"[B<-V>I<[dependencies]>] [B<-n>] [B<-X>I<item>]"
msgstr ""

# type: textblock
#: dh_makeshlibs:18
msgid ""
"dh_makeshlibs is a debhelper program that automatically scans for shared "
"libraries, and generates a shlibs file for the libraries it finds."
msgstr ""

# type: textblock
#: dh_makeshlibs:21
msgid ""
"It also adds a call to ldconfig in the postinst and postrm scripts (in V3 "
"mode and above only) to any packages which it finds shared libraries in."
msgstr ""

# type: =item
#: dh_makeshlibs:28
msgid "B<-m>I<major>, B<--major=>I<major>"
msgstr ""

# type: textblock
#: dh_makeshlibs:30
msgid ""
"Instead of trying to guess the major number of the library with objdump, use "
"the major number specified after the -m parameter. This is much less useful "
"than it used to be, back in the bad old days when this program looked at "
"library filenames rather than using objdump."
msgstr ""

# type: =item
#: dh_makeshlibs:35
msgid "B<-V>, B<-V>I<dependencies>"
msgstr ""

# type: =item
#: dh_makeshlibs:37
msgid "B<--version-info>, B<--version-info=>I<dependencies>"
msgstr ""

# type: textblock
#: dh_makeshlibs:39
msgid ""
"By default, the shlibs file generated by this program does not make packages "
"depend on any particular version of the package containing the shared "
"library. It may be necessary for you to add some version dependancy "
"information to the shlibs file. If -V is specified with no dependency "
"information, the current upstream version of the package is plugged into a "
"dependency that looks like \"packagename (>= packageversion)\". Note that in "
"debhelper compatibility levels before v4, the debian part of the package "
"version number is also included. If -V is specified with parameters, the "
"parameters can be used to specify the exact dependency information needed "
"(be sure to include the package name)."
msgstr ""

# type: textblock
#: dh_makeshlibs:50
msgid ""
"Beware of using -V without any parameters; this is a conservative setting "
"that always ensures that other packages' shared library dependencies are at "
"least as tight as they need to be (unless your library is prone to changing "
"ABI without updating the upstream version number), so that if the maintainer "
"screws up then they won't break. The flip side is that packages might end up "
"with dependencies that are too tight and so find it harder to be upgraded."
msgstr ""

# type: textblock
#: dh_makeshlibs:64
msgid ""
"Exclude files that contain \"item\" anywhere in their filename or directory "
"from being treated as shared libraries."
msgstr ""

# type: =item
#: dh_makeshlibs:73
msgid "dh_makeshlibs"
msgstr ""

# type: verbatim
#: dh_makeshlibs:75
#, no-wrap
msgid ""
"Assuming this is a package named libfoobar1, generates a shlibs file that\n"
"looks something like:\n"
" libfoobar 1 libfoobar1\n"
"\n"
msgstr ""

# type: =item
#: dh_makeshlibs:79
msgid "dh_makeshlibs -V"
msgstr ""

# type: verbatim
#: dh_makeshlibs:81
#, no-wrap
msgid ""
"Assuming the current version of the package is 1.1-3, generates a shlibs\n"
"file that looks something like:\n"
" libfoobar 1 libfoobar1 (>= 1.1)\n"
"\n"
msgstr ""

# type: =item
#: dh_makeshlibs:85
msgid "dh_makeshlibs -V 'libfoobar1 (>= 1.0)'"
msgstr ""

# type: verbatim
#: dh_makeshlibs:87
#, no-wrap
msgid ""
"Generates a shlibs file that looks something like:\n"
"  libfoobar 1 libfoobar1 (>= 1.0)\n"
"\n"
msgstr ""

# type: textblock
#: dh_perl:5
msgid "dh_perl - calculates perl dependencies"
msgstr ""

# type: textblock
#: dh_perl:16
msgid "B<dh_perl> [S<I<debhelper options>>] [B<-d>] [S<I<library dirs ...>>]"
msgstr ""

# type: textblock
#: dh_perl:20
msgid ""
"dh_perl is a debhelper program that is responsible for generating the "
"${perl:Depends} substitutions and adding them to substvars files."
msgstr ""

# type: textblock
#: dh_perl:23
msgid ""
"The program will look at perl scripts and modules in your package, and will "
"use this information to generate a dependency on perl or perlapi. The "
"dependency will be substituted into your package's control file wherever you "
"place the token \"${perl:Depends}\"."
msgstr ""

# type: =item
#: dh_perl:32
msgid "B<-d>"
msgstr ""

# type: textblock
#: dh_perl:34
msgid ""
"In some specific cases you may want to depend on perl-base rather than the "
"full perl package. If so, you can pass the -d option to make dh_perl "
"generate a dependency on the correct base package. This is only necessary "
"for some packages that are included in the base system."
msgstr ""

# type: textblock
#: dh_perl:39
msgid ""
"Note that this flag may cause no dependency on perl-base to be generated at "
"all. perl-base is Essential, so its dependency can be left out, unless a "
"versioned dependency is needed."
msgstr ""

# type: =item
#: dh_perl:43
msgid "B<-V>"
msgstr ""

# type: textblock
#: dh_perl:45
msgid ""
"By default, scripts and architecture independent modules don't depend on any "
"specific version of perl.  The -V option causes the current version of the "
"perl (or perl-base with -d) package to be specified."
msgstr ""

# type: =item
#: dh_perl:49
msgid "I<library dirs>"
msgstr ""

# type: textblock
#: dh_perl:51
msgid ""
"If your package installs perl modules in non-standard directories, you can "
"make dh_perl check those directories by passing their names on the command "
"line. It will only check the vendorlib and vendorarch directories by "
"default."
msgstr ""

# type: textblock
#: dh_perl:62
msgid "Perl policy, version 1.18"
msgstr ""

# type: textblock
#: dh_perl:148
msgid "Brendan O'Dea <bod@debian.org>"
msgstr ""

# type: textblock
#: dh_fixperms:5
msgid "dh_fixperms - fix permissions of files in package build directories"
msgstr ""

# type: textblock
#: dh_fixperms:14
msgid "B<dh_fixperms> [S<I<debhelper options>>] [B<-X>I<item>]"
msgstr ""

# type: textblock
#: dh_fixperms:18
msgid ""
"dh_fixperms is a debhelper program that is responsible for setting the "
"permissions of files and directories in package build directories to a sane "
"state -- a state that complies with Debian policy."
msgstr ""

# type: textblock
#: dh_fixperms:22
msgid ""
"dh_fixperms makes all files in usr/share/doc in the package build directory "
"(excluding files in the examples/ directory) be mode 644. It also changes "
"the permissions of all man pages to mode 644. It makes all files be owned by "
"root, and it removes group and other write permission from all files. It "
"removes execute permissions from any libraries that have it set. It makes "
"all files in bin/ directories, /usr/games/ and etc/init.d executable (v4 "
"only). Finally, it removes the setuid and setgid bits from all files in the "
"package."
msgstr ""

# type: =item
#: dh_fixperms:35
msgid "B<-X>I<item>, B<--exclude> I<item>"
msgstr ""

# type: textblock
#: dh_fixperms:37
msgid ""
"Exclude files that contain \"item\" anywhere in their filename from having "
"their permissions changed. You may use this option multiple times to build "
"up a list of things to exclude."
msgstr ""

# type: textblock
#: dh_listpackages:5
msgid "dh_listpackages - list binary packages debhelper will act on"
msgstr ""

# type: textblock
#: dh_listpackages:14
msgid "B<dh_listpackages> [S<I<debhelper options>>]"
msgstr ""

# type: textblock
#: dh_listpackages:18
msgid ""
"dh_listpackages is a debhelper program that outputs a list of all binary "
"packages debhelper commands will act on. If you pass it some options, it "
"will change the list to match the packages other debhelper commands would "
"act on if passed the same options."
msgstr ""

# type: textblock
#: dh_installman:5
msgid "dh_installman - install man pages into package build directories"
msgstr ""

# type: textblock
#: dh_installman:15
msgid "B<dh_installman> [S<I<debhelper options>>] [S<I<manpage ...>>]"
msgstr ""

# type: textblock
#: dh_installman:19
msgid ""
"dh_installman is a debhelper program that handles installing man pages into "
"the correct locations in package build directories. You tell it what man "
"pages go in your packages, and it figures out where to install them based on "
"the section field in their .TH line. If you have a properly formatted .TH "
"line, your man page will be installed into the right directory, with the "
"right name (this includes proper handling of pages with a subsection, like "
"\"3perl\", which are placed in man3, and given an extension of "
"\".3perl\"). If your .TH line is incorrect or missing, the program may guess "
"wrong based on the file extension."
msgstr ""

# type: textblock
#: dh_installman:29
msgid ""
"It also supports translated man pages, by looking for extensions like .ll.8 "
"and .ll_LL.8"
msgstr ""

# type: textblock
#: dh_installman:32
msgid ""
"If dh_installman seems to install a man page into the wrong section or with "
"the wrong extension, this is because the man page has the wrong section "
"listed in its .TH line. Edit the man page and correct the section, and "
"dh_installman will follow suit.  See to L<man(7)> for details about the .TH "
"section. If dh_installman seems to install a man page into a directory like "
"/usr/share/man/pl/man1/, that is because your program has a name like "
"\"foo.pl\", and dh_installman assumes that means it is translated into "
"Polish. There is currently no support for resolving this ambiguity; programs "
"in debian should probably not have extensions like that anyway."
msgstr ""

# type: textblock
#: dh_installman:42
msgid ""
"Any man page filenames specified as parameters will be installed into the "
"first package dh_installman is told to act on. By default, this is the first "
"binary package in debian/control, but if you use -p, -i, or -a flags, it "
"will be the first package specified by those flags."
msgstr ""

# type: textblock
#: dh_installman:47
msgid ""
"Files named debian/package.manpages can list other man pages to be "
"installed."
msgstr ""

# type: textblock
#: dh_installman:50
msgid ""
"After the man page installation step, dh_installman will check to see if any "
"of the man pages in the temporary directories of any of the packages it is "
"acting on contain \".so\" links. If so, it changes them to symlinks."
msgstr ""

# type: =item
#: dh_installman:63
msgid "I<manpage ...>"
msgstr ""

# type: textblock
#: dh_installman:65
msgid ""
"Install these man pages into the first package acted on. (Or in all packages "
"if -A is specified)."
msgstr ""

# type: textblock
#: dh_installman:72
msgid ""
"An older version of this program, L<dh_installmanpages(1)>, is still used by "
"some packages, and so is still included in debhelper.  It is, however, "
"deprecated, due to its counterintuitive and inconsistent interface. Use this "
"program instead."
msgstr ""

# type: textblock
#: dh_testroot:5
msgid "dh_testroot - ensure that a package is built as root"
msgstr ""

# type: textblock
#: dh_testroot:9
msgid "B<dh_testroot> [S<I<debhelper options>>]"
msgstr ""

# type: textblock
#: dh_testroot:13
msgid ""
"dh_testroot simply checks to see if you are root. If not, it exits with an "
"error. Debian packages must be built as root, though you can use "
"L<fakeroot(1)>"
msgstr ""

# type: textblock
#: dh_movefiles:5
msgid "dh_movefiles - move files out of debian/tmp into subpackages"
msgstr ""

# type: textblock
#: dh_movefiles:14
msgid ""
"B<dh_movefiles> [S<I<debhelper options>>] [B<--sourcedir=>I<dir>] "
"[B<-X>I<item>] S<I<file ...>>]"
msgstr ""

# type: textblock
#: dh_movefiles:18
msgid ""
"dh_movefiles is a debhelper program that is responsible for moving files out "
"of debian/tmp or some other directory and into other package build "
"directories. This may be useful if your package has a Makefile that installs "
"everything into debian/tmp, and you need to break that up into subpackages."
msgstr ""

# type: textblock
#: dh_movefiles:23
msgid ""
"Files named debian/package.files list the files to be moved, separated by "
"whitespace. The filenames listed should be relative to debian/tmp/. You can "
"also list directory names, and the whole directory will be moved. If you "
"prefer, you can list the files to move on the command line and this will "
"apply to the first package dh_movefiles is told to act on."
msgstr ""

# type: textblock
#: dh_movefiles:29
msgid ""
"Note: dh_install is a much better program that can do everything this one "
"can, and more."
msgstr ""

# type: =item
#: dh_movefiles:36
msgid "B<--sourcedir=>I<dir>"
msgstr ""

# type: textblock
#: dh_movefiles:38
msgid ""
"Instead of moving files out of debian/tmp (the default), this option makes "
"it move files out of some other directory. Since the entire contents of the "
"sourcedir is moved, specifiying something like --sourcedir=/ is very unsafe, "
"so to prevent mistakes, the sourcedir must be a relative filename; it cannot "
"begin with a `/'."
msgstr ""

# type: textblock
#: dh_movefiles:51
msgid ""
"Lists files to move. The filenames listed should be relative to "
"debian/tmp/. You can also list directory names, and the whole directory will "
"be moved. It is an error to list files here unless you use -p, -i, or -a to "
"tell dh_movefiles which subpackage to put them in."
msgstr ""

# type: textblock
#: dh_movefiles:60
msgid ""
"Note that files are always moved out of debian/tmp by default (even if you "
"have instructed debhelper to use a compatibility level higher than one, "
"which does not otherwise use debian/tmp for anything at all). The idea "
"behind this is that the package that is being built can be told to install "
"into debian/tmp, and then files can be moved by dh_movefiles from that "
"directory. Any files or directories that remain are ignored, and get deleted "
"by dh_clean later."
msgstr ""

# type: textblock
#: dh_desktop:5
msgid "dh_desktop - Register .desktop files"
msgstr ""

# type: textblock
#: dh_desktop:14
msgid "B<dh_desktop> [S<I<debhelper options>>] [B<-p<package>>]"
msgstr ""

# type: textblock
#: dh_desktop:18
msgid ""
"dh_desktop is a debhelper program that registers .desktop files.  Currently "
"this program does not handle installation of the files, though it may do so "
"at a later date. It takes care of adding maintainer script fragments to call "
"F<update-desktop-database>."
msgstr ""

# type: textblock
#: dh_suidregister:5
msgid "dh_suidregister - obsolete suid registration program"
msgstr ""

# type: textblock
#: dh_suidregister:13
msgid ""
"This program used to register suid and sgid files with L<suidregister(1)>, "
"but with the introduction of L<dpkg-statoverride(8)>, registration of files "
"in this way is unnecessary, and even harmful, so this program should not be "
"used."
msgstr ""

# type: =head1
#: dh_suidregister:18
msgid "CONVERTING TO STATOVERRIDE"
msgstr ""

# type: textblock
#: dh_suidregister:20
msgid ""
"Converting a package that uses this program to use the new statoverride "
"mechanism is easy. Just remove the call to dh_suidregister from "
"debian/rules, and add a versioned conflicts into your control file, as "
"follows:"
msgstr ""

# type: verbatim
#: dh_suidregister:25
#, no-wrap
msgid ""
"  Conflicts: suidmanager (<< 0.50)\n"
"\n"
msgstr ""

# type: textblock
#: dh_suidregister:27
msgid ""
"The conflicts is only necessary if your package used to register things with "
"suidmanager; if it did not, you can just remove the call to this program "
"from your rules file."
msgstr ""

# type: textblock
#: dh_installchangelogs:5
msgid "dh_installchangelogs - install changelogs into package build directories"
msgstr ""

# type: textblock
#: dh_installchangelogs:14
msgid "B<dh_installchangelogs> [<S<I<debhelper options>>] [B<-k>] [I<upstream>]"
msgstr ""

# type: textblock
#: dh_installchangelogs:18
msgid ""
"dh_installchangelogs is a debhelper program that is responsible for "
"installing changelogs into package build directories."
msgstr ""

# type: textblock
#: dh_installchangelogs:21
msgid ""
"dh_installchangelogs determines if the package is a debian native package, "
"and if so, it installs debian/changelog into usr/share/doc/package/changelog "
"in the package build directory. Otherwise, it installs debian/changelog into "
"usr/share/doc/package/changelog.Debian in the package build directory. (If "
"files named debian/package.changelog exist, they will be used in preference "
"to debian/changelog.)"
msgstr ""

# type: textblock
#: dh_installchangelogs:28
msgid ""
"Parallelling the debian changelog handling, this program also takes care of "
"NEWS.Debian files. If there is a debian/NEWS file, it is installed as "
"usr/share/doc/package/NEWS.Debian. debian/package.NEWS files can also be "
"used."
msgstr ""

# type: textblock
#: dh_installchangelogs:33
msgid ""
"If an upstream changelog file is specified as an option, then this upstream "
"changelog will be installed as usr/share/doc/package/changelog in the "
"package build directory. If the changelog is a html file (determined by file "
"extension), it will be installed as usr/share/doc/package/changelog.html "
"instead, and will be converted to plain text with html2text to generate "
"usr/share/doc/package/changelog."
msgstr ""

# type: textblock
#: dh_installchangelogs:46
msgid ""
"Keep the original name of the upstream changelog. This will be accomplished "
"by installing the upstream changelog as \"changelog\", and making a symlink "
"from that to the original name of the changelog file. This can be useful if "
"the upstream changelog has an unusual name, or if other documentation in the "
"package refers to the changelog file."
msgstr ""

# type: =item
#: dh_installchangelogs:52
msgid "I<upstream>"
msgstr ""

# type: textblock
#: dh_installchangelogs:54
msgid "Install this file as the upstream changelog."
msgstr ""

# type: textblock
#: dh_python:5
msgid ""
"dh_python - calculates python dependencies and adds postinst and prerm "
"python scripts"
msgstr ""

# type: textblock
#: dh_python:15
msgid ""
"B<dh_python> [S<I<debhelper options>>] [B<-n>] [B<-V> I<version>] "
"[S<I<module dirs ...>>]"
msgstr ""

# type: textblock
#: dh_python:19
msgid ""
"dh_python is a debhelper program that is responsible for generating the "
"${python:Depends} substitutions and adding them to substvars files. It will "
"also add a postinst and a prerm script if required."
msgstr ""

# type: textblock
#: dh_python:23
msgid ""
"The program will look at python scripts and modules in your package, and "
"will use this information to generate a dependency on python, with the "
"current major version, or on pythonX.Y if your scripts or modules need a "
"specific python version. The dependency will be substituted into your "
"package's control file wherever you place the token \"${python:Depends}\"."
msgstr ""

# type: textblock
#: dh_python:29
msgid ""
"If some modules need to be byte-compiled at install time, appropriate "
"postinst and prerm scripts will be generated. If already byte-compiled "
"modules are found, they are removed."
msgstr ""

# type: textblock
#: dh_python:33
msgid "If you use this program, your package should build-depend on python."
msgstr ""

# type: =item
#: dh_python:39
msgid "I<module dirs>"
msgstr ""

# type: textblock
#: dh_python:41
msgid ""
"If your package installs python modules in non-standard directories, you can "
"make dh_python check those directories by passing their names on the command "
"line. By default, it will check /usr/lib/site-python, /usr/lib/$PACKAGE, "
"/usr/share/$PACKAGE, /usr/lib/games/$PACKAGE, /usr/share/games/$PACKAGE and "
"/usr/lib/python?.?/site-packages."
msgstr ""

# type: textblock
#: dh_python:47
msgid ""
"Note: only /usr/lib/site-python, /usr/lib/python?.?/site-packages and the "
"extra names on the command line are searched for binary (.so) modules."
msgstr ""

# type: =item
#: dh_python:50
msgid "B<-V> I<version>"
msgstr ""

# type: textblock
#: dh_python:52
msgid ""
"If the .py files your package ships are meant to be used by a specific "
"pythonX.Y version, you can use this option to specify the desired version, "
"such as 2.3. Do not use if you ship modules in /usr/lib/site-python."
msgstr ""

# type: textblock
#: dh_python:64
msgid "Debian policy, version 3.5.7"
msgstr ""

# type: textblock
#: dh_python:66
msgid "Python policy, version 0.3.7"
msgstr ""

# type: textblock
#: dh_python:274
msgid "Josselin Mouette <joss@debian.org>"
msgstr ""

# type: textblock
#: dh_python:276
msgid "most ideas stolen from Brendan O'Dea <bod@debian.org>"
msgstr ""

# type: textblock
#: dh_installdocs:5
msgid "dh_installdocs - install documentation into package build directories"
msgstr ""

# type: textblock
#: dh_installdocs:14
msgid ""
"B<dh_installdocs> [S<I<debhelper options>>] [B<-A>] [B<-n>] [B<-X>I<item>] "
"[S<I<file ...>>]"
msgstr ""

# type: textblock
#: dh_installdocs:18
msgid ""
"dh_installdocs is a debhelper program that is responsible for installing "
"documentation into usr/share/doc/package in package build directories."
msgstr ""

# type: textblock
#: dh_installdocs:21
msgid ""
"dh_installdocs automatically installs debian/copyright if it exists. If "
"dh_installdocs is acting on multiple packages, debian/copyright files will "
"be installed into all packages. However, if you need to have separate "
"copyright files for different binary packages, you can use files named "
"debian/package.copyright."
msgstr ""

# type: textblock
#: dh_installdocs:27
msgid ""
"Any filenames specified as parameters will be installed into the first "
"package dh_installdocs is told to act on. By default, this is the first "
"binary package in debian/control, but if you use B<-p>, B<-i>, or B<-a> "
"flags, it will be the first package specified by those flags."
msgstr ""

# type: textblock
#: dh_installdocs:32
msgid ""
"Also, debian/README.Debian (or debian/README.debian) and debian/TODO, if "
"they exist, will be installed into the first binary package listed in "
"debian/control, if dh_installdocs is acting on that package. Note that "
"debian/TODO will be installed named TODO.Debian, if the package is not a "
"debian native package. Also note that README.debian is installed as "
"README.Debian, for consistency. Note that debian/package.README.Debian and "
"debian/package.TODO can be used to specify files for subpackages."
msgstr ""

# type: textblock
#: dh_installdocs:40
msgid "Files named debian/package.docs can list other files to be installed."
msgstr ""

# type: textblock
#: dh_installdocs:42
msgid ""
"Files named debian/package.doc-base, will be installed as doc-base control "
"files, and will make this program automatically generate the postinst and "
"prerm commands needed to interface with the doc-base package. Note that the "
"doc-id will be determined from the \"Document:\" entry in the doc-base "
"control file in question."
msgstr ""

# type: textblock
#: dh_installdocs:48
msgid ""
"If your package needs to register more than one document, you need multiple "
"files. To accomplish this, you can use files named debian/package.doc-base.*"
msgstr ""

# type: textblock
#: dh_installdocs:71
msgid ""
"Install these files as documentation into the first package acted on. (Or in "
"all packages if B<-A> is specified)."
msgstr ""

# type: textblock
#: dh_installdocs:78
msgid "This is an example of a debian/package.docs file:"
msgstr ""

# type: verbatim
#: dh_installdocs:80
#, no-wrap
msgid ""
"  README\n"
"  TODO\n"
"  debian/notes-for-maintainers.txt\n"
"  docs/manual.txt\n"
"  docs/manual.pdf\n"
"  docs/manual-html/\n"
"\n"
msgstr ""

# type: textblock
#: dh_installdocs:89
msgid ""
"Note that dh_installdocs will happily copy entire directory hierarchies if "
"you ask it to (similar to cp -a). If it is asked to install a directory, it "
"will install the complete contents of the directory."
msgstr ""

# type: textblock
#: dh_installdocs:93
msgid ""
"Note that this command is not idempotent. \"dh_clean B<-k>\" should be "
"called between invocations of this command. Otherwise, it may cause multiple "
"instances of the same text to be added to maintainer scripts."
msgstr ""

# type: textblock
#: dh_installcatalogs:5
msgid "dh_installcatalogs - install and register SGML Catalogs"
msgstr ""

# type: textblock
#: dh_installcatalogs:16
msgid "B<dh_installcatalogs> [S<I<debhelper options>>] [B<-n>]"
msgstr ""

# type: textblock
#: dh_installcatalogs:20
msgid ""
"dh_installcatalogs is a debhelper program that installs and registers SGML "
"catalogs. (Note: it will be extended for XML catalog registration when "
"xml-core is available.)  It complies with the Debian XML/SGML policy."
msgstr ""

# type: textblock
#: dh_installcatalogs:25
msgid ""
"The file F<debian/I<package>.sgmlcatalogs> contains the catalogs to be "
"installed per package.  Each line in that file should be of the form "
"C<source dest>, where C<source> indicates where the catalog resides in the "
"source tree, and C<dest> indicates the destination location for the catalog "
"under the package build area.  C<dest> should start with "
"F</usr/share/sgml/>."
msgstr ""

# type: textblock
#: dh_installcatalogs:32
msgid ""
"Catalogs will be registered in a supercatalog, in "
"F</etc/sgml/I<package>.cat>."
msgstr ""

# type: textblock
#: dh_installcatalogs:35
msgid ""
"This command automatically adds maintainer script snippets for registering "
"and unregistering the catalogs and \"supercatalogs\" (unless B<-n> is "
"used).  A dependency on B<sgml-base> will be added to C<${misc:Depends}>, so "
"be sure your package uses that variable in F<debian/control>.  See "
"L<dh_installdeb(1)> for an explanation of Debhelper maintainer script "
"snippets."
msgstr ""

# type: textblock
#: dh_installcatalogs:48
msgid "Do not modify F<postinst>/F<postrm>/F<prerm> scripts."
msgstr ""

# type: textblock
#: dh_installcatalogs:109
msgid "F</usr/share/doc/sgml-base-doc/>"
msgstr ""

# type: textblock
#: dh_installcatalogs:113
msgid "Adam Di Carlo <aph@debian.org>"
msgstr ""

# type: textblock
#: dh_installmanpages:5
msgid "dh_installmanpages - old-style man page installer"
msgstr ""

# type: textblock
#: dh_installmanpages:15
msgid "B<dh_installmanpages> [S<I<debhelper options>>] [S<I<file ...>>]"
msgstr ""

# type: textblock
#: dh_installmanpages:19
msgid ""
"dh_installmanpages is a debhelper program that is responsible for "
"automatically installing man pages into usr/share/man/ and usr/X11R6/man/ in "
"package build directories."
msgstr ""

# type: textblock
#: dh_installmanpages:23
msgid ""
"This is a DWIM-style program, with an interface unlike the rest of "
"debhelper. It is deprecated, and you are encouraged to use "
"L<dh_installman(1)> instead."
msgstr ""

# type: textblock
#: dh_installmanpages:27
msgid ""
"dh_installmanpages scans the current directory and all subdirectories for "
"filenames that look like man pages. (Note that only real files are looked "
"at; symlinks are ignored.) It uses L<file(1)> to verify that the files are "
"in the correct format. Then, based on the files' extensions, it installs "
"them into the correct man directory."
msgstr ""

# type: textblock
#: dh_installmanpages:33
msgid ""
"All filenames specified as parameters will be skipped by "
"dh_installmanpages.  This is useful if by default it installs some man pages "
"that you do not want to be installed."
msgstr ""

# type: textblock
#: dh_installmanpages:37
msgid ""
"After the man page installation step, dh_installmanpages will check to see "
"if any of the man pages are \".so\" links. If so, it changes them to "
"symlinks."
msgstr ""

# type: textblock
#: dh_installmanpages:46
msgid ""
"Do not install these files as man pages, even if they look like valid man "
"pages."
msgstr ""

# type: =head1
#: dh_installmanpages:51
msgid "BUGS"
msgstr ""

# type: textblock
#: dh_installmanpages:53
msgid ""
"dh_installmanpages will install the man pages it finds into B<all> packages "
"you tell it to act on, since it can't tell what package the man pages belong "
"in. This is almost never what you really want (use -p to work around this, "
"or use the much better L<dh_installman(1)> program instead)."
msgstr ""

# type: textblock
#: dh_installmanpages:58
msgid "Files ending in I<.man> will be ignored."
msgstr ""

# type: textblock
#: dh_installmanpages:60
msgid ""
"Files specified as parameters that contain spaces in their filenames will "
"not be processed properly."
msgstr ""

# type: textblock
#: dh_installxfonts:5
msgid "dh_installxfonts - register X fonts"
msgstr ""

# type: textblock
#: dh_installxfonts:14
msgid "B<dh_installxfonts> [S<I<debhelper options>>]"
msgstr ""

# type: textblock
#: dh_installxfonts:18
msgid ""
"dh_installxfonts is a debhelper program that is responsible for registering "
"X fonts, so their corresponding fonts.dir, fonts.alias, and fonts.scale be "
"rebuilt properly at install time."
msgstr ""

# type: textblock
#: dh_installxfonts:22
msgid ""
"Before calling this program, you should have installed any X fonts provided "
"by your package into the appropriate location in the package build "
"directory, and if you have fonts.alias or fonts.scale files, you should "
"install them into the correct location under etc/X11/fonts in your package "
"build directory."
msgstr ""

# type: textblock
#: dh_installxfonts:28
msgid ""
"Your package should depend on xutils (>= 4.0.3) so that the update-fonts-* "
"commands are available. (This program adds that dependency to "
"${misc:Depends}.)"
msgstr ""

# type: textblock
#: dh_installxfonts:32
msgid ""
"This program automatically generates the postinst and postrm commands needed "
"to register X fonts.  See L<dh_installdeb(1)> for an explanation of how this "
"works."
msgstr ""

# type: textblock
#: dh_installxfonts:38
msgid ""
"See L<update-fonts-alias(8)>, L<update-fonts-scale(8)>, and "
"L<update-fonts-dir(8)> for more information about X font installation."
msgstr ""

# type: textblock
#: dh_installxfonts:41
msgid ""
"See Debian policy, section 11.8.5. for details about doing fonts the Debian "
"way."
msgstr ""

# type: textblock
#: dh_installlogcheck:5
msgid "dh_installlogcheck - install logcheck rulefiles into etc/logcheck/"
msgstr ""

# type: textblock
#: dh_installlogcheck:14
msgid "B<dh_installlogcheck> [S<B<debhelper options>>]"
msgstr ""

# type: textblock
#: dh_installlogcheck:18
msgid ""
"dh_installlocgheck is a debhelper program that is responsible for installing "
"logcheck rule files into subdirectories of etc/logcheck/ in package build "
"directories. The files debian/package.logcheck.cracking, "
"debian/package.logcheck.violations, "
"debian/package.logcheck.violations.ignore, "
"debian/package.logcheck.ignore.workstation, "
"debian/package.logcheck.ignore.server and "
"debian/package.logcheck.ignore.paranoid are installed if present."
msgstr ""

# type: verbatim
#: dh_installlogcheck:55
#, no-wrap
msgid ""
"This program is a part of debhelper.\n"
"    \n"
msgstr ""

# type: textblock
#: dh_installlogcheck:59
msgid "Jon Middleton <jjm@debian.org>"
msgstr ""

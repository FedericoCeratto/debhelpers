#!/usr/bin/perl -w
#
# Move files out of debian/tmp, into subpackages.

use strict;
use Debian::Debhelper::Dh_Lib;
init();

my $ret=0;

foreach my $package (@{$dh{DOPACKAGES}}) {
	my $tmp=tmpdir($package);
	my $files=pkgfile($package,"files");

	my $sourcedir="debian/tmp";
	if ($dh{SOURCEDIR}) {
		if ($dh{SOURCEDIR}=~m:^/:) {
			error("The sourcedir must be a relative filename, not starting with `/'.");
		}
		$sourcedir=$dh{SOURCEDIR};
	}

	if (! -d $sourcedir) {
		error("$sourcedir does not exist.");
	}

	my @tomove;

        # debian/files has a different purpose, so ignore it.
	if ($files && $files ne "debian/files" ) {
		@tomove=filearray($files, $sourcedir);
	}
	
	if (($package eq $dh{FIRSTPACKAGE} || $dh{PARAMS_ALL}) && @ARGV) {
		push @tomove, @ARGV;
	}

	if (@tomove && $tmp eq $sourcedir) {
		error("I was asked to move files from $sourcedir to $sourcedir. Perhaps you should set DH_COMAPT=2?");
	}

	# Now we need to expand wildcards in @tomove.
	# This is only necessary in pre-v3 land -- as of v3, the
	# expension is automatically done by filearray().
	if (@tomove && compat(2)) {
		my @filelist=();
		foreach (@tomove) {
			push @filelist, glob("$sourcedir/$_");
		}
		@tomove=@filelist;
	}
	else {
		# However, filearray() does not add the sourcedir,
		# which we need.
		@tomove = map { "$sourcedir/$_" } @tomove;
	}

	if (@tomove) {
		if (! -d $tmp) {
			doit("install","-d",$tmp);
		}

		doit("rm","-f","debian/movelist");
		foreach (@tomove) {
			my $file=$_;
			if (! -e $file && ! -l $file) {
				$ret=1;
				warning("$file not found");
			}
			$file=~s:^\Q$sourcedir\E/+::;
			complex_doit("(cd $sourcedir >/dev/null ; find $file ! -type d -print || true) >> debian/movelist");
		}
		complex_doit("(cd $sourcedir >/dev/null ; tar --create --remove-files --files-from=../movelist --file -) | (cd $tmp >/dev/null ;tar xpf -)");
		doit("rm","-f","debian/movelist");
	}
}

# If $ret is set, we wern't actually able to find some 
# files that were specified to be moved, and we should
# exit with the code in $ret. This program puts off 
# exiting with an error until all files have been tried
# to be moved, because this makes it easier for some 
# packages that arn't always sure exactly which files need
# to be moved.
exit $ret;

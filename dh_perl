#!/usr/bin/perl -w

=head1 NAME

dh_perl - calculates perl scripts & modules dependencies

=cut

use strict;
use Config;
use File::Find;
use Debian::Debhelper::Dh_Lib;

=head1 SYNOPSIS

  dh_perl [debhelper options] [-d] [library dirs ...]

=head1 DESCRIPTION

dh_perl is a debhelper program that is responsible for generating
the perl:Depends substitutions and adding them to substvars files.

The program will look at perl scripts and modules in your package,
and will use this information to generate a dependency.
The dependancy will be substituted into your package's control file
wherever you place the token "${perl:Depends}".

=head1 OPTIONS

=over 4

=item B<-d>

In some specific cases you may want to depend on perl-base rather than the
full perl package. If so, you can pass the -d option to make dh_perl generate
a dependency on the correct base package. This is only necessary for some
packages that are included in the base system.

=item B<-V>

By default, scripts and architecture independent modules don't depend
on any specific version of perl.  The -V option causes the current
version of the perl (or perl-base with -d) package to be specified.

=item I<library dirs>

If your package installs perl modules in non-standard
directories, you can make dh_perl check those directories by passing their
names on the command line. It will only check the vendorlib and vendorarch
directories by default.

=back

=head1 CONFORMS TO

Debian policy, version 3.0.1

Perl policy, version 1.18

=cut

init();

my $vendorlib = substr $Config{vendorlib}, 1;
my $vendorarch = substr $Config{vendorarch}, 1;

# the installation dir for arch-indep modules changed to
# /usr/share/perl5 in this version:
my $min_version = '5.6.0-16';

# Cleaning the paths given on the command line
foreach (@ARGV) {
	s#/$##;
	s#^/##;
}

my $perl = 'perl';
# If -d is given, then the dependency is on perl-base rather than perl.
$perl .= '-base' if $dh{D_FLAG};
my $version;

# dependency types
use constant PROGRAM   => 1;
use constant PM_MODULE => 2;
use constant XS_MODULE => 4;

foreach my $package (@{$dh{DOPACKAGES}}) {
	my $tmp = tmpdir($package);
	my $ext = pkgext($package);

	my @subs;
	if (open IN, "debian/${ext}substvars")
	{
	    @subs = grep !/^perl:Depends=/, <IN>;
	    close IN;
	}

	# Check also for alternate locations given on the command line
	my @dirs = grep -d, map "$tmp/$_", $vendorlib, $vendorarch, @ARGV;

	# Look for perl modules and check where they are installed
	my $deps = 0;
	find sub {
		return unless -f;
		$deps |= PM_MODULE if /\.pm$/;
		$deps |= XS_MODULE if /\.so$/;
	    }, @dirs if @dirs;

	# find scripts
	find sub {
		return unless -f and (-x or /\.pl$/);
		local *F;
		return unless open F, $_;
		if (read F, local $_, 32 and m%^#!\s*/usr/bin/perl\s%)
		{
		    $deps |= PROGRAM;
		}

		close F;
	    }, $tmp;

	if ($deps)
	{
	    my $perl_depends = $perl;
	    if ($deps & XS_MODULE or $dh{V_FLAG_SET})
	    {
		($version) = `dpkg -s $perl` =~ /^Version:\s*(\S+)/m
		    unless $version;

		$perl_depends .= " (>= $version)";
	    }
	    elsif ($deps & PM_MODULE)
	    {
		$perl_depends .= " (>= $min_version)";
	    }

	    # add perlapi-<ver> for XS modules
	    $perl_depends .= ", perlapi-$Config{version}"
		if $deps & XS_MODULE;

	    # don't need to depend on an un-versioned perl-base, it's
	    # essential
	    push @subs, "perl:Depends=$perl_depends\n"
		unless $perl_depends eq 'perl-base';
	}

	open OUT, ">debian/${ext}substvars";
	print OUT @subs;
	close OUT;
}

=head1 SEE ALSO

L<debhelper(1)>

This program is a part of debhelper.

=head1 AUTHOR

Brendan O'Dea <bod@debian.org>

=cut
